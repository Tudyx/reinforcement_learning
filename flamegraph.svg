<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="646" onload="init(evt)" viewBox="0 0 1200 646" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="646" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="629.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="629.00"> </text><svg id="frames" x="10" width="1180" total_samples="13527"><g><title>[ld-linux-x86-64.so.2] (7 samples, 0.05%)</title><rect x="0.0148%" y="565" width="0.0517%" height="15" fill="rgb(227,0,7)" fg:x="2" fg:w="7"/><text x="0.2648%" y="575.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.01%)</title><rect x="0.0517%" y="549" width="0.0148%" height="15" fill="rgb(217,0,24)" fg:x="7" fg:w="2"/><text x="0.3017%" y="559.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.01%)</title><rect x="0.0517%" y="533" width="0.0148%" height="15" fill="rgb(221,193,54)" fg:x="7" fg:w="2"/><text x="0.3017%" y="543.50"></text></g><g><title>[ld-linux-x86-64.so.2] (2 samples, 0.01%)</title><rect x="0.0517%" y="517" width="0.0148%" height="15" fill="rgb(248,212,6)" fg:x="7" fg:w="2"/><text x="0.3017%" y="527.50"></text></g><g><title>[libc.so.6] (20 samples, 0.15%)</title><rect x="0.0665%" y="565" width="0.1479%" height="15" fill="rgb(208,68,35)" fg:x="9" fg:w="20"/><text x="0.3165%" y="575.50"></text></g><g><title>main (2 samples, 0.01%)</title><rect x="0.1996%" y="549" width="0.0148%" height="15" fill="rgb(232,128,0)" fg:x="27" fg:w="2"/><text x="0.4496%" y="559.50"></text></g><g><title>std::rt::lang_start_internal (2 samples, 0.01%)</title><rect x="0.1996%" y="533" width="0.0148%" height="15" fill="rgb(207,160,47)" fg:x="27" fg:w="2"/><text x="0.4496%" y="543.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.01%)</title><rect x="0.1996%" y="517" width="0.0148%" height="15" fill="rgb(228,23,34)" fg:x="27" fg:w="2"/><text x="0.4496%" y="527.50"></text></g><g><title>std::panicking::try (2 samples, 0.01%)</title><rect x="0.1996%" y="501" width="0.0148%" height="15" fill="rgb(218,30,26)" fg:x="27" fg:w="2"/><text x="0.4496%" y="511.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.01%)</title><rect x="0.1996%" y="485" width="0.0148%" height="15" fill="rgb(220,122,19)" fg:x="27" fg:w="2"/><text x="0.4496%" y="495.50"></text></g><g><title>std::rt::lang_start_internal::{{closure}} (2 samples, 0.01%)</title><rect x="0.1996%" y="469" width="0.0148%" height="15" fill="rgb(250,228,42)" fg:x="27" fg:w="2"/><text x="0.4496%" y="479.50"></text></g><g><title>std::panic::catch_unwind (2 samples, 0.01%)</title><rect x="0.1996%" y="453" width="0.0148%" height="15" fill="rgb(240,193,28)" fg:x="27" fg:w="2"/><text x="0.4496%" y="463.50"></text></g><g><title>std::panicking::try (2 samples, 0.01%)</title><rect x="0.1996%" y="437" width="0.0148%" height="15" fill="rgb(216,20,37)" fg:x="27" fg:w="2"/><text x="0.4496%" y="447.50"></text></g><g><title>std::panicking::try::do_call (2 samples, 0.01%)</title><rect x="0.1996%" y="421" width="0.0148%" height="15" fill="rgb(206,188,39)" fg:x="27" fg:w="2"/><text x="0.4496%" y="431.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2 samples, 0.01%)</title><rect x="0.1996%" y="405" width="0.0148%" height="15" fill="rgb(217,207,13)" fg:x="27" fg:w="2"/><text x="0.4496%" y="415.50"></text></g><g><title>std::rt::lang_start::&lt;()&gt;::{closure#0} (2 samples, 0.01%)</title><rect x="0.1996%" y="389" width="0.0148%" height="15" fill="rgb(231,73,38)" fg:x="27" fg:w="2"/><text x="0.4496%" y="399.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace::&lt;fn(), ()&gt; (2 samples, 0.01%)</title><rect x="0.1996%" y="373" width="0.0148%" height="15" fill="rgb(225,20,46)" fg:x="27" fg:w="2"/><text x="0.4496%" y="383.50"></text></g><g><title>cargo::main (2 samples, 0.01%)</title><rect x="0.1996%" y="357" width="0.0148%" height="15" fill="rgb(210,31,41)" fg:x="27" fg:w="2"/><text x="0.4496%" y="367.50"></text></g><g><title>cargo::cli::main (2 samples, 0.01%)</title><rect x="0.1996%" y="341" width="0.0148%" height="15" fill="rgb(221,200,47)" fg:x="27" fg:w="2"/><text x="0.4496%" y="351.50"></text></g><g><title>cargo::init_git (2 samples, 0.01%)</title><rect x="0.1996%" y="325" width="0.0148%" height="15" fill="rgb(226,26,5)" fg:x="27" fg:w="2"/><text x="0.4496%" y="335.50"></text></g><g><title>cargo::ops::registry::needs_custom_http_transport (2 samples, 0.01%)</title><rect x="0.1996%" y="309" width="0.0148%" height="15" fill="rgb(249,33,26)" fg:x="27" fg:w="2"/><text x="0.4496%" y="319.50"></text></g><g><title>cargo::ops::registry::http_proxy (2 samples, 0.01%)</title><rect x="0.1996%" y="293" width="0.0148%" height="15" fill="rgb(235,183,28)" fg:x="27" fg:w="2"/><text x="0.4496%" y="303.50"></text></g><g><title>&lt;git2::config::Config&gt;::open_default (2 samples, 0.01%)</title><rect x="0.1996%" y="277" width="0.0148%" height="15" fill="rgb(221,5,38)" fg:x="27" fg:w="2"/><text x="0.4496%" y="287.50"></text></g><g><title>libgit2_sys::init (2 samples, 0.01%)</title><rect x="0.1996%" y="261" width="0.0148%" height="15" fill="rgb(247,18,42)" fg:x="27" fg:w="2"/><text x="0.4496%" y="271.50"></text></g><g><title>&lt;std::sys_common::once::futex::Once&gt;::call::&lt;&lt;std::sync::once::Once&gt;::call_once&lt;libgit2_sys::init::{closure#0}&gt;::{closure#0}&gt; (2 samples, 0.01%)</title><rect x="0.1996%" y="245" width="0.0148%" height="15" fill="rgb(241,131,45)" fg:x="27" fg:w="2"/><text x="0.4496%" y="255.50"></text></g><g><title>git_runtime_init (2 samples, 0.01%)</title><rect x="0.1996%" y="229" width="0.0148%" height="15" fill="rgb(249,31,29)" fg:x="27" fg:w="2"/><text x="0.4496%" y="239.50"></text></g><g><title>git_openssl_stream_global_init (2 samples, 0.01%)</title><rect x="0.1996%" y="213" width="0.0148%" height="15" fill="rgb(225,111,53)" fg:x="27" fg:w="2"/><text x="0.4496%" y="223.50"></text></g><g><title>X509_STORE_set_default_paths (2 samples, 0.01%)</title><rect x="0.1996%" y="197" width="0.0148%" height="15" fill="rgb(238,160,17)" fg:x="27" fg:w="2"/><text x="0.4496%" y="207.50"></text></g><g><title>by_file_ctrl (2 samples, 0.01%)</title><rect x="0.1996%" y="181" width="0.0148%" height="15" fill="rgb(214,148,48)" fg:x="27" fg:w="2"/><text x="0.4496%" y="191.50"></text></g><g><title>X509_load_cert_crl_file (2 samples, 0.01%)</title><rect x="0.1996%" y="165" width="0.0148%" height="15" fill="rgb(232,36,49)" fg:x="27" fg:w="2"/><text x="0.4496%" y="175.50"></text></g><g><title>PEM_X509_INFO_read_bio (2 samples, 0.01%)</title><rect x="0.1996%" y="149" width="0.0148%" height="15" fill="rgb(209,103,24)" fg:x="27" fg:w="2"/><text x="0.4496%" y="159.50"></text></g><g><title>cargo::ops::cargo_compile::compile_ws (2 samples, 0.01%)</title><rect x="0.2366%" y="549" width="0.0148%" height="15" fill="rgb(229,88,8)" fg:x="32" fg:w="2"/><text x="0.4866%" y="559.50"></text></g><g><title>cargo::ops::cargo_compile::create_bcx (2 samples, 0.01%)</title><rect x="0.2366%" y="533" width="0.0148%" height="15" fill="rgb(213,181,19)" fg:x="32" fg:w="2"/><text x="0.4866%" y="543.50"></text></g><g><title>cargo::ops::cargo_compile::create_bcx (5 samples, 0.04%)</title><rect x="0.2513%" y="549" width="0.0370%" height="15" fill="rgb(254,191,54)" fg:x="34" fg:w="5"/><text x="0.5013%" y="559.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (5 samples, 0.04%)</title><rect x="0.2513%" y="533" width="0.0370%" height="15" fill="rgb(241,83,37)" fg:x="34" fg:w="5"/><text x="0.5013%" y="543.50"></text></g><g><title>cargo::ops::resolve::resolve_with_registry (4 samples, 0.03%)</title><rect x="0.2587%" y="517" width="0.0296%" height="15" fill="rgb(233,36,39)" fg:x="35" fg:w="4"/><text x="0.5087%" y="527.50"></text></g><g><title>cargo::ops::resolve::resolve_with_previous (4 samples, 0.03%)</title><rect x="0.2587%" y="501" width="0.0296%" height="15" fill="rgb(226,3,54)" fg:x="35" fg:w="4"/><text x="0.5087%" y="511.50"></text></g><g><title>cargo::core::resolver::resolve (4 samples, 0.03%)</title><rect x="0.2587%" y="485" width="0.0296%" height="15" fill="rgb(245,192,40)" fg:x="35" fg:w="4"/><text x="0.5087%" y="495.50"></text></g><g><title>cargo::core::resolver::activate (3 samples, 0.02%)</title><rect x="0.2661%" y="469" width="0.0222%" height="15" fill="rgb(238,167,29)" fg:x="36" fg:w="3"/><text x="0.5161%" y="479.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps (3 samples, 0.02%)</title><rect x="0.2661%" y="453" width="0.0222%" height="15" fill="rgb(232,182,51)" fg:x="36" fg:w="3"/><text x="0.5161%" y="463.50"></text></g><g><title>core::iter::adapters::try_process::&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;, (cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), core::result::Result&lt;core::convert::Infallible, anyhow::Error&gt;, &lt;core::result::Result&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, anyhow::Error&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), anyhow::Error&gt;&gt;&gt;::from_iter&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;&gt;::{closure#0}, alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;&gt; (3 samples, 0.02%)</title><rect x="0.2661%" y="437" width="0.0222%" height="15" fill="rgb(231,60,39)" fg:x="36" fg:w="3"/><text x="0.5161%" y="447.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), core::iter::adapters::GenericShunt&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;, core::result::Result&lt;core::convert::Infallible, anyhow::Error&gt;&gt;&gt;&gt;::from_iter (3 samples, 0.02%)</title><rect x="0.2661%" y="421" width="0.0222%" height="15" fill="rgb(208,69,12)" fg:x="36" fg:w="3"/><text x="0.5161%" y="431.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0} (3 samples, 0.02%)</title><rect x="0.2661%" y="405" width="0.0222%" height="15" fill="rgb(235,93,37)" fg:x="36" fg:w="3"/><text x="0.5161%" y="415.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::query (3 samples, 0.02%)</title><rect x="0.2661%" y="389" width="0.0222%" height="15" fill="rgb(213,116,39)" fg:x="36" fg:w="3"/><text x="0.5161%" y="399.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (3 samples, 0.02%)</title><rect x="0.2661%" y="373" width="0.0222%" height="15" fill="rgb(222,207,29)" fg:x="36" fg:w="3"/><text x="0.5161%" y="383.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (3 samples, 0.02%)</title><rect x="0.2661%" y="357" width="0.0222%" height="15" fill="rgb(206,96,30)" fg:x="36" fg:w="3"/><text x="0.5161%" y="367.50"></text></g><g><title>&lt;cargo::sources::registry::index::RegistryIndex&gt;::query_inner_with_online (3 samples, 0.02%)</title><rect x="0.2661%" y="341" width="0.0222%" height="15" fill="rgb(218,138,4)" fg:x="36" fg:w="3"/><text x="0.5161%" y="351.50"></text></g><g><title>&lt;cargo::sources::registry::index::RegistryIndex&gt;::summaries (2 samples, 0.01%)</title><rect x="0.2735%" y="325" width="0.0148%" height="15" fill="rgb(250,191,14)" fg:x="37" fg:w="2"/><text x="0.5235%" y="335.50"></text></g><g><title>cargo::ops::cargo_run::run (2 samples, 0.01%)</title><rect x="0.2957%" y="549" width="0.0148%" height="15" fill="rgb(239,60,40)" fg:x="40" fg:w="2"/><text x="0.5457%" y="559.50"></text></g><g><title>cargo::ops::cargo_compile::compile (2 samples, 0.01%)</title><rect x="0.2957%" y="533" width="0.0148%" height="15" fill="rgb(206,27,48)" fg:x="40" fg:w="2"/><text x="0.5457%" y="543.50"></text></g><g><title>cargo::ops::cargo_compile::compile_ws (2 samples, 0.01%)</title><rect x="0.2957%" y="517" width="0.0148%" height="15" fill="rgb(225,35,8)" fg:x="40" fg:w="2"/><text x="0.5457%" y="527.50"></text></g><g><title>&lt;cargo::core::compiler::context::Context&gt;::compile (2 samples, 0.01%)</title><rect x="0.2957%" y="501" width="0.0148%" height="15" fill="rgb(250,213,24)" fg:x="40" fg:w="2"/><text x="0.5457%" y="511.50"></text></g><g><title>cargo::ops::resolve::resolve_with_previous (2 samples, 0.01%)</title><rect x="0.3105%" y="549" width="0.0148%" height="15" fill="rgb(247,123,22)" fg:x="42" fg:w="2"/><text x="0.5605%" y="559.50"></text></g><g><title>cargo::core::resolver::resolve (2 samples, 0.01%)</title><rect x="0.3105%" y="533" width="0.0148%" height="15" fill="rgb(231,138,38)" fg:x="42" fg:w="2"/><text x="0.5605%" y="543.50"></text></g><g><title>cargo::core::resolver::activate (2 samples, 0.01%)</title><rect x="0.3105%" y="517" width="0.0148%" height="15" fill="rgb(231,145,46)" fg:x="42" fg:w="2"/><text x="0.5605%" y="527.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps (2 samples, 0.01%)</title><rect x="0.3105%" y="501" width="0.0148%" height="15" fill="rgb(251,118,11)" fg:x="42" fg:w="2"/><text x="0.5605%" y="511.50"></text></g><g><title>core::iter::adapters::try_process::&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;, (cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), core::result::Result&lt;core::convert::Infallible, anyhow::Error&gt;, &lt;core::result::Result&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, anyhow::Error&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), anyhow::Error&gt;&gt;&gt;::from_iter&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;&gt;::{closure#0}, alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;&gt; (2 samples, 0.01%)</title><rect x="0.3105%" y="485" width="0.0148%" height="15" fill="rgb(217,147,25)" fg:x="42" fg:w="2"/><text x="0.5605%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), core::iter::adapters::GenericShunt&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;, core::result::Result&lt;core::convert::Infallible, anyhow::Error&gt;&gt;&gt;&gt;::from_iter (2 samples, 0.01%)</title><rect x="0.3105%" y="469" width="0.0148%" height="15" fill="rgb(247,81,37)" fg:x="42" fg:w="2"/><text x="0.5605%" y="479.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0} (2 samples, 0.01%)</title><rect x="0.3105%" y="453" width="0.0148%" height="15" fill="rgb(209,12,38)" fg:x="42" fg:w="2"/><text x="0.5605%" y="463.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::query (2 samples, 0.01%)</title><rect x="0.3105%" y="437" width="0.0148%" height="15" fill="rgb(227,1,9)" fg:x="42" fg:w="2"/><text x="0.5605%" y="447.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (2 samples, 0.01%)</title><rect x="0.3105%" y="421" width="0.0148%" height="15" fill="rgb(248,47,43)" fg:x="42" fg:w="2"/><text x="0.5605%" y="431.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (2 samples, 0.01%)</title><rect x="0.3105%" y="405" width="0.0148%" height="15" fill="rgb(221,10,30)" fg:x="42" fg:w="2"/><text x="0.5605%" y="415.50"></text></g><g><title>&lt;cargo::sources::registry::index::RegistryIndex&gt;::query_inner_with_online (2 samples, 0.01%)</title><rect x="0.3105%" y="389" width="0.0148%" height="15" fill="rgb(210,229,1)" fg:x="42" fg:w="2"/><text x="0.5605%" y="399.50"></text></g><g><title>&lt;cargo::sources::registry::index::RegistryIndex&gt;::summaries (2 samples, 0.01%)</title><rect x="0.3105%" y="373" width="0.0148%" height="15" fill="rgb(222,148,37)" fg:x="42" fg:w="2"/><text x="0.5605%" y="383.50"></text></g><g><title>&lt;cargo::sources::registry::remote::RemoteRegistry as cargo::sources::registry::RegistryData&gt;::load (2 samples, 0.01%)</title><rect x="0.3105%" y="357" width="0.0148%" height="15" fill="rgb(234,67,33)" fg:x="42" fg:w="2"/><text x="0.5605%" y="367.50"></text></g><g><title>&lt;git2::tree::Tree&gt;::get_path (2 samples, 0.01%)</title><rect x="0.3105%" y="341" width="0.0148%" height="15" fill="rgb(247,98,35)" fg:x="42" fg:w="2"/><text x="0.5605%" y="351.50"></text></g><g><title>git_tree_entry_bypath (2 samples, 0.01%)</title><rect x="0.3105%" y="325" width="0.0148%" height="15" fill="rgb(247,138,52)" fg:x="42" fg:w="2"/><text x="0.5605%" y="335.50"></text></g><g><title>git_tree_entry_bypath (2 samples, 0.01%)</title><rect x="0.3105%" y="309" width="0.0148%" height="15" fill="rgb(213,79,30)" fg:x="42" fg:w="2"/><text x="0.5605%" y="319.50"></text></g><g><title>git_object_lookup_prefix (2 samples, 0.01%)</title><rect x="0.3105%" y="293" width="0.0148%" height="15" fill="rgb(246,177,23)" fg:x="42" fg:w="2"/><text x="0.5605%" y="303.50"></text></g><g><title>git_odb_read (2 samples, 0.01%)</title><rect x="0.3105%" y="277" width="0.0148%" height="15" fill="rgb(230,62,27)" fg:x="42" fg:w="2"/><text x="0.5605%" y="287.50"></text></g><g><title>odb_read_1 (2 samples, 0.01%)</title><rect x="0.3105%" y="261" width="0.0148%" height="15" fill="rgb(216,154,8)" fg:x="42" fg:w="2"/><text x="0.5605%" y="271.50"></text></g><g><title>pack_backend__read (2 samples, 0.01%)</title><rect x="0.3105%" y="245" width="0.0148%" height="15" fill="rgb(244,35,45)" fg:x="42" fg:w="2"/><text x="0.5605%" y="255.50"></text></g><g><title>git_packfile_unpack (2 samples, 0.01%)</title><rect x="0.3105%" y="229" width="0.0148%" height="15" fill="rgb(251,115,12)" fg:x="42" fg:w="2"/><text x="0.5605%" y="239.50"></text></g><g><title>packfile_unpack_compressed (2 samples, 0.01%)</title><rect x="0.3105%" y="213" width="0.0148%" height="15" fill="rgb(240,54,50)" fg:x="42" fg:w="2"/><text x="0.5605%" y="223.50"></text></g><g><title>git_zstream_get_output_chunk (2 samples, 0.01%)</title><rect x="0.3105%" y="197" width="0.0148%" height="15" fill="rgb(233,84,52)" fg:x="42" fg:w="2"/><text x="0.5605%" y="207.50"></text></g><g><title>inflate (2 samples, 0.01%)</title><rect x="0.3105%" y="181" width="0.0148%" height="15" fill="rgb(207,117,47)" fg:x="42" fg:w="2"/><text x="0.5605%" y="191.50"></text></g><g><title>cargo::ops::resolve::resolve_with_registry (2 samples, 0.01%)</title><rect x="0.3253%" y="549" width="0.0148%" height="15" fill="rgb(249,43,39)" fg:x="44" fg:w="2"/><text x="0.5753%" y="559.50"></text></g><g><title>&lt;cargo::sources::registry::index::RegistryIndex&gt;::summaries (2 samples, 0.01%)</title><rect x="0.3401%" y="341" width="0.0148%" height="15" fill="rgb(209,38,44)" fg:x="46" fg:w="2"/><text x="0.5901%" y="351.50"></text></g><g><title>cargo::ops::resolve::resolve_ws_with_opts (5 samples, 0.04%)</title><rect x="0.3401%" y="549" width="0.0370%" height="15" fill="rgb(236,212,23)" fg:x="46" fg:w="5"/><text x="0.5901%" y="559.50"></text></g><g><title>cargo::ops::resolve::resolve_with_registry (5 samples, 0.04%)</title><rect x="0.3401%" y="533" width="0.0370%" height="15" fill="rgb(242,79,21)" fg:x="46" fg:w="5"/><text x="0.5901%" y="543.50"></text></g><g><title>cargo::ops::resolve::resolve_with_previous (5 samples, 0.04%)</title><rect x="0.3401%" y="517" width="0.0370%" height="15" fill="rgb(211,96,35)" fg:x="46" fg:w="5"/><text x="0.5901%" y="527.50"></text></g><g><title>cargo::core::resolver::resolve (5 samples, 0.04%)</title><rect x="0.3401%" y="501" width="0.0370%" height="15" fill="rgb(253,215,40)" fg:x="46" fg:w="5"/><text x="0.5901%" y="511.50"></text></g><g><title>cargo::core::resolver::activate (5 samples, 0.04%)</title><rect x="0.3401%" y="485" width="0.0370%" height="15" fill="rgb(211,81,21)" fg:x="46" fg:w="5"/><text x="0.5901%" y="495.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps (5 samples, 0.04%)</title><rect x="0.3401%" y="469" width="0.0370%" height="15" fill="rgb(208,190,38)" fg:x="46" fg:w="5"/><text x="0.5901%" y="479.50"></text></g><g><title>core::iter::adapters::try_process::&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;, (cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), core::result::Result&lt;core::convert::Infallible, anyhow::Error&gt;, &lt;core::result::Result&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, anyhow::Error&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), anyhow::Error&gt;&gt;&gt;::from_iter&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;&gt;::{closure#0}, alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;&gt; (5 samples, 0.04%)</title><rect x="0.3401%" y="453" width="0.0370%" height="15" fill="rgb(235,213,38)" fg:x="46" fg:w="5"/><text x="0.5901%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::vec::Vec&lt;cargo::core::summary::Summary&gt;&gt;, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;), core::iter::adapters::GenericShunt&lt;core::iter::adapters::filter_map::FilterMap&lt;alloc::vec::into_iter::IntoIter&lt;(cargo::core::dependency::Dependency, alloc::rc::Rc&lt;alloc::collections::btree::set::BTreeSet&lt;cargo::util::interning::InternedString&gt;&gt;)&gt;, &lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0}&gt;, core::result::Result&lt;core::convert::Infallible, anyhow::Error&gt;&gt;&gt;&gt;::from_iter (5 samples, 0.04%)</title><rect x="0.3401%" y="437" width="0.0370%" height="15" fill="rgb(237,122,38)" fg:x="46" fg:w="5"/><text x="0.5901%" y="447.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::build_deps::{closure#0} (5 samples, 0.04%)</title><rect x="0.3401%" y="421" width="0.0370%" height="15" fill="rgb(244,218,35)" fg:x="46" fg:w="5"/><text x="0.5901%" y="431.50"></text></g><g><title>&lt;cargo::core::resolver::dep_cache::RegistryQueryer&gt;::query (5 samples, 0.04%)</title><rect x="0.3401%" y="405" width="0.0370%" height="15" fill="rgb(240,68,47)" fg:x="46" fg:w="5"/><text x="0.5901%" y="415.50"></text></g><g><title>&lt;cargo::core::registry::PackageRegistry as cargo::core::registry::Registry&gt;::query (5 samples, 0.04%)</title><rect x="0.3401%" y="389" width="0.0370%" height="15" fill="rgb(210,16,53)" fg:x="46" fg:w="5"/><text x="0.5901%" y="399.50"></text></g><g><title>&lt;cargo::sources::registry::RegistrySource as cargo::core::source::Source&gt;::query (5 samples, 0.04%)</title><rect x="0.3401%" y="373" width="0.0370%" height="15" fill="rgb(235,124,12)" fg:x="46" fg:w="5"/><text x="0.5901%" y="383.50"></text></g><g><title>&lt;cargo::sources::registry::index::RegistryIndex&gt;::query_inner_with_online (5 samples, 0.04%)</title><rect x="0.3401%" y="357" width="0.0370%" height="15" fill="rgb(224,169,11)" fg:x="46" fg:w="5"/><text x="0.5901%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::filter::Filter&lt;core::iter::adapters::filter_map::FilterMap&lt;core::iter::adapters::filter_map::FilterMap&lt;std::collections::hash::map::IterMut&lt;semver::Version, cargo::sources::registry::index::MaybeIndexSummary&gt;, &lt;cargo::sources::registry::index::RegistryIndex&gt;::summaries::{closure#0}&gt;, &lt;cargo::sources::registry::index::RegistryIndex&gt;::summaries::{closure#1}&gt;, &lt;cargo::sources::registry::index::RegistryIndex&gt;::summaries::{closure#2}&gt;, &lt;cargo::sources::registry::index::RegistryIndex&gt;::query_inner_with_online::{closure#0}&gt;, &lt;cargo::sources::registry::index::RegistryIndex&gt;::query_inner_with_online::{closure#1}&gt;, &lt;cargo::sources::registry::index::RegistryIndex&gt;::query_inner_with_online::{closure#2}&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::&lt;(), core::iter::traits::iterator::Iterator::find::check&lt;cargo::core::summary::Summary, &amp;mut &lt;cargo::sources::registry::index::RegistryIndex&gt;::query_inner_with_online::{closure#3}&gt;::{closure#0}, core::ops::control_flow::ControlFlow&lt;cargo::core::summary::Summary&gt;&gt; (3 samples, 0.02%)</title><rect x="0.3548%" y="341" width="0.0222%" height="15" fill="rgb(250,166,2)" fg:x="48" fg:w="3"/><text x="0.6048%" y="351.50"></text></g><g><title>&lt;cargo::sources::registry::index::IndexSummary&gt;::parse (3 samples, 0.02%)</title><rect x="0.3548%" y="325" width="0.0222%" height="15" fill="rgb(242,216,29)" fg:x="48" fg:w="3"/><text x="0.6048%" y="335.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_key_seed (2 samples, 0.01%)</title><rect x="0.3992%" y="309" width="0.0148%" height="15" fill="rgb(230,116,27)" fg:x="54" fg:w="2"/><text x="0.6492%" y="319.50"></text></g><g><title>rustup::config::Cfg::find_or_install_override_toolchain_or_default::components_exist (3 samples, 0.02%)</title><rect x="0.3992%" y="549" width="0.0222%" height="15" fill="rgb(228,99,48)" fg:x="54" fg:w="3"/><text x="0.6492%" y="559.50"></text></g><g><title>rustup::toolchain::DistributableToolchain::get_toolchain_desc_with_manifest (3 samples, 0.02%)</title><rect x="0.3992%" y="533" width="0.0222%" height="15" fill="rgb(253,11,6)" fg:x="54" fg:w="3"/><text x="0.6492%" y="543.50"></text></g><g><title>rustup::dist::manifestation::Manifestation::load_manifest (3 samples, 0.02%)</title><rect x="0.3992%" y="517" width="0.0222%" height="15" fill="rgb(247,143,39)" fg:x="54" fg:w="3"/><text x="0.6492%" y="527.50"></text></g><g><title>rustup::dist::manifest::Manifest::parse (3 samples, 0.02%)</title><rect x="0.3992%" y="501" width="0.0222%" height="15" fill="rgb(236,97,10)" fg:x="54" fg:w="3"/><text x="0.6492%" y="511.50"></text></g><g><title>toml::de::from_str (3 samples, 0.02%)</title><rect x="0.3992%" y="485" width="0.0222%" height="15" fill="rgb(233,208,19)" fg:x="54" fg:w="3"/><text x="0.6492%" y="495.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.02%)</title><rect x="0.3992%" y="469" width="0.0222%" height="15" fill="rgb(216,164,2)" fg:x="54" fg:w="3"/><text x="0.6492%" y="479.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.02%)</title><rect x="0.3992%" y="453" width="0.0222%" height="15" fill="rgb(220,129,5)" fg:x="54" fg:w="3"/><text x="0.6492%" y="463.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.02%)</title><rect x="0.3992%" y="437" width="0.0222%" height="15" fill="rgb(242,17,10)" fg:x="54" fg:w="3"/><text x="0.6492%" y="447.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.02%)</title><rect x="0.3992%" y="421" width="0.0222%" height="15" fill="rgb(242,107,0)" fg:x="54" fg:w="3"/><text x="0.6492%" y="431.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.02%)</title><rect x="0.3992%" y="405" width="0.0222%" height="15" fill="rgb(251,28,31)" fg:x="54" fg:w="3"/><text x="0.6492%" y="415.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.02%)</title><rect x="0.3992%" y="389" width="0.0222%" height="15" fill="rgb(233,223,10)" fg:x="54" fg:w="3"/><text x="0.6492%" y="399.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.02%)</title><rect x="0.3992%" y="373" width="0.0222%" height="15" fill="rgb(215,21,27)" fg:x="54" fg:w="3"/><text x="0.6492%" y="383.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.02%)</title><rect x="0.3992%" y="357" width="0.0222%" height="15" fill="rgb(232,23,21)" fg:x="54" fg:w="3"/><text x="0.6492%" y="367.50"></text></g><g><title>&lt;toml::de::MapVisitor as serde::de::MapAccess&gt;::next_value_seed (3 samples, 0.02%)</title><rect x="0.3992%" y="341" width="0.0222%" height="15" fill="rgb(244,5,23)" fg:x="54" fg:w="3"/><text x="0.6492%" y="351.50"></text></g><g><title>&lt;&lt;toml::value::Value as serde::de::Deserialize&gt;::deserialize::ValueVisitor as serde::de::Visitor&gt;::visit_map (3 samples, 0.02%)</title><rect x="0.3992%" y="325" width="0.0222%" height="15" fill="rgb(226,81,46)" fg:x="54" fg:w="3"/><text x="0.6492%" y="335.50"></text></g><g><title>[unknown] (29 samples, 0.21%)</title><rect x="0.2144%" y="565" width="0.2144%" height="15" fill="rgb(247,70,30)" fg:x="29" fg:w="29"/><text x="0.4644%" y="575.50"></text></g><g><title>rustup::dist::manifest::TargetedPackage::from_toml (2 samples, 0.01%)</title><rect x="0.4436%" y="373" width="0.0148%" height="15" fill="rgb(212,68,19)" fg:x="60" fg:w="2"/><text x="0.6936%" y="383.50"></text></g><g><title>toml::tokens::Tokenizer::eat_spanned (3 samples, 0.02%)</title><rect x="0.4879%" y="341" width="0.0222%" height="15" fill="rgb(240,187,13)" fg:x="66" fg:w="3"/><text x="0.7379%" y="351.50"></text></g><g><title>toml::tokens::Tokenizer::next (2 samples, 0.01%)</title><rect x="0.4953%" y="325" width="0.0148%" height="15" fill="rgb(223,113,26)" fg:x="67" fg:w="2"/><text x="0.7453%" y="335.50"></text></g><g><title>toml::de::Deserializer::tables (10 samples, 0.07%)</title><rect x="0.4657%" y="357" width="0.0739%" height="15" fill="rgb(206,192,2)" fg:x="63" fg:w="10"/><text x="0.7157%" y="367.50"></text></g><g><title>toml::tokens::Tokenizer::table_key (2 samples, 0.01%)</title><rect x="0.5249%" y="341" width="0.0148%" height="15" fill="rgb(241,108,4)" fg:x="71" fg:w="2"/><text x="0.7749%" y="351.50"></text></g><g><title>_start (16 samples, 0.12%)</title><rect x="0.4362%" y="565" width="0.1183%" height="15" fill="rgb(247,173,49)" fg:x="59" fg:w="16"/><text x="0.6862%" y="575.50"></text></g><g><title>__libc_start_main (16 samples, 0.12%)</title><rect x="0.4362%" y="549" width="0.1183%" height="15" fill="rgb(224,114,35)" fg:x="59" fg:w="16"/><text x="0.6862%" y="559.50"></text></g><g><title>[libc.so.6] (16 samples, 0.12%)</title><rect x="0.4362%" y="533" width="0.1183%" height="15" fill="rgb(245,159,27)" fg:x="59" fg:w="16"/><text x="0.6862%" y="543.50"></text></g><g><title>main (16 samples, 0.12%)</title><rect x="0.4362%" y="517" width="0.1183%" height="15" fill="rgb(245,172,44)" fg:x="59" fg:w="16"/><text x="0.6862%" y="527.50"></text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (16 samples, 0.12%)</title><rect x="0.4362%" y="501" width="0.1183%" height="15" fill="rgb(236,23,11)" fg:x="59" fg:w="16"/><text x="0.6862%" y="511.50"></text></g><g><title>rustup_init::main (16 samples, 0.12%)</title><rect x="0.4362%" y="485" width="0.1183%" height="15" fill="rgb(205,117,38)" fg:x="59" fg:w="16"/><text x="0.6862%" y="495.50"></text></g><g><title>rustup::cli::proxy_mode::main (16 samples, 0.12%)</title><rect x="0.4362%" y="469" width="0.1183%" height="15" fill="rgb(237,72,25)" fg:x="59" fg:w="16"/><text x="0.6862%" y="479.50"></text></g><g><title>rustup::config::Cfg::find_or_install_override_toolchain_or_default (16 samples, 0.12%)</title><rect x="0.4362%" y="453" width="0.1183%" height="15" fill="rgb(244,70,9)" fg:x="59" fg:w="16"/><text x="0.6862%" y="463.50"></text></g><g><title>rustup::config::Cfg::find_or_install_override_toolchain_or_default::components_exist (16 samples, 0.12%)</title><rect x="0.4362%" y="437" width="0.1183%" height="15" fill="rgb(217,125,39)" fg:x="59" fg:w="16"/><text x="0.6862%" y="447.50"></text></g><g><title>rustup::toolchain::DistributableToolchain::get_toolchain_desc_with_manifest (15 samples, 0.11%)</title><rect x="0.4436%" y="421" width="0.1109%" height="15" fill="rgb(235,36,10)" fg:x="60" fg:w="15"/><text x="0.6936%" y="431.50"></text></g><g><title>rustup::dist::manifestation::Manifestation::load_manifest (15 samples, 0.11%)</title><rect x="0.4436%" y="405" width="0.1109%" height="15" fill="rgb(251,123,47)" fg:x="60" fg:w="15"/><text x="0.6936%" y="415.50"></text></g><g><title>rustup::dist::manifest::Manifest::parse (15 samples, 0.11%)</title><rect x="0.4436%" y="389" width="0.1109%" height="15" fill="rgb(221,13,13)" fg:x="60" fg:w="15"/><text x="0.6936%" y="399.50"></text></g><g><title>toml::de::from_str (13 samples, 0.10%)</title><rect x="0.4583%" y="373" width="0.0961%" height="15" fill="rgb(238,131,9)" fg:x="62" fg:w="13"/><text x="0.7083%" y="383.50"></text></g><g><title>cargo (79 samples, 0.58%)</title><rect x="0.0000%" y="581" width="0.5840%" height="15" fill="rgb(211,50,8)" fg:x="0" fg:w="79"/><text x="0.2500%" y="591.50"></text></g><g><title>syscall (4 samples, 0.03%)</title><rect x="0.5544%" y="565" width="0.0296%" height="15" fill="rgb(245,182,24)" fg:x="75" fg:w="4"/><text x="0.8044%" y="575.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (10 samples, 0.07%)</title><rect x="0.5840%" y="565" width="0.0739%" height="15" fill="rgb(242,14,37)" fg:x="79" fg:w="10"/><text x="0.8340%" y="575.50"></text></g><g><title>&lt;rust_gym::easy_21::Action as core::hash::Hash&gt;::hash (130 samples, 0.96%)</title><rect x="0.9610%" y="501" width="0.9610%" height="15" fill="rgb(246,228,12)" fg:x="130" fg:w="130"/><text x="1.2110%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (130 samples, 0.96%)</title><rect x="0.9610%" y="485" width="0.9610%" height="15" fill="rgb(213,55,15)" fg:x="130" fg:w="130"/><text x="1.2110%" y="495.50"></text></g><g><title>core::hash::Hasher::write_isize (130 samples, 0.96%)</title><rect x="0.9610%" y="469" width="0.9610%" height="15" fill="rgb(209,9,3)" fg:x="130" fg:w="130"/><text x="1.2110%" y="479.50"></text></g><g><title>core::hash::Hasher::write_usize (130 samples, 0.96%)</title><rect x="0.9610%" y="453" width="0.9610%" height="15" fill="rgb(230,59,30)" fg:x="130" fg:w="130"/><text x="1.2110%" y="463.50"></text></g><g><title>[[heap]] (290 samples, 2.14%)</title><rect x="0.6579%" y="565" width="2.1439%" height="15" fill="rgb(209,121,21)" fg:x="89" fg:w="290"/><text x="0.9079%" y="575.50">[..</text></g><g><title>core::hash::BuildHasher::hash_one (290 samples, 2.14%)</title><rect x="0.6579%" y="549" width="2.1439%" height="15" fill="rgb(220,109,13)" fg:x="89" fg:w="290"/><text x="0.9079%" y="559.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (249 samples, 1.84%)</title><rect x="0.9610%" y="533" width="1.8408%" height="15" fill="rgb(232,18,1)" fg:x="130" fg:w="249"/><text x="1.2110%" y="543.50">c..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (249 samples, 1.84%)</title><rect x="0.9610%" y="517" width="1.8408%" height="15" fill="rgb(215,41,42)" fg:x="130" fg:w="249"/><text x="1.2110%" y="527.50">c..</text></g><g><title>&lt;rust_gym::easy_21::Observation as core::hash::Hash&gt;::hash (119 samples, 0.88%)</title><rect x="1.9221%" y="501" width="0.8797%" height="15" fill="rgb(224,123,36)" fg:x="260" fg:w="119"/><text x="2.1721%" y="511.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i8&gt;::hash (119 samples, 0.88%)</title><rect x="1.9221%" y="485" width="0.8797%" height="15" fill="rgb(240,125,3)" fg:x="260" fg:w="119"/><text x="2.1721%" y="495.50"></text></g><g><title>core::hash::Hasher::write_i8 (119 samples, 0.88%)</title><rect x="1.9221%" y="469" width="0.8797%" height="15" fill="rgb(205,98,50)" fg:x="260" fg:w="119"/><text x="2.1721%" y="479.50"></text></g><g><title>core::hash::Hasher::write_u8 (119 samples, 0.88%)</title><rect x="1.9221%" y="453" width="0.8797%" height="15" fill="rgb(205,185,37)" fg:x="260" fg:w="119"/><text x="2.1721%" y="463.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (9 samples, 0.07%)</title><rect x="2.8018%" y="549" width="0.0665%" height="15" fill="rgb(238,207,15)" fg:x="379" fg:w="9"/><text x="3.0518%" y="559.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (9 samples, 0.07%)</title><rect x="2.8018%" y="533" width="0.0665%" height="15" fill="rgb(213,199,42)" fg:x="379" fg:w="9"/><text x="3.0518%" y="543.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (9 samples, 0.07%)</title><rect x="2.8018%" y="517" width="0.0665%" height="15" fill="rgb(235,201,11)" fg:x="379" fg:w="9"/><text x="3.0518%" y="527.50"></text></g><g><title>core::hash::BuildHasher::hash_one (149 samples, 1.10%)</title><rect x="2.8683%" y="549" width="1.1015%" height="15" fill="rgb(207,46,11)" fg:x="388" fg:w="149"/><text x="3.1183%" y="559.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (2 samples, 0.01%)</title><rect x="3.9698%" y="549" width="0.0148%" height="15" fill="rgb(241,35,35)" fg:x="537" fg:w="2"/><text x="4.2198%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (25 samples, 0.18%)</title><rect x="3.9846%" y="533" width="0.1848%" height="15" fill="rgb(243,32,47)" fg:x="539" fg:w="25"/><text x="4.2346%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (25 samples, 0.18%)</title><rect x="3.9846%" y="517" width="0.1848%" height="15" fill="rgb(247,202,23)" fg:x="539" fg:w="25"/><text x="4.2346%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (25 samples, 0.18%)</title><rect x="3.9846%" y="501" width="0.1848%" height="15" fill="rgb(219,102,11)" fg:x="539" fg:w="25"/><text x="4.2346%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (25 samples, 0.18%)</title><rect x="3.9846%" y="485" width="0.1848%" height="15" fill="rgb(243,110,44)" fg:x="539" fg:w="25"/><text x="4.2346%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (25 samples, 0.18%)</title><rect x="3.9846%" y="469" width="0.1848%" height="15" fill="rgb(222,74,54)" fg:x="539" fg:w="25"/><text x="4.2346%" y="479.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (3 samples, 0.02%)</title><rect x="4.1694%" y="533" width="0.0222%" height="15" fill="rgb(216,99,12)" fg:x="564" fg:w="3"/><text x="4.4194%" y="543.50"></text></g><g><title>sarsa::TdAgent::train::{{closure}} (3 samples, 0.02%)</title><rect x="4.1694%" y="517" width="0.0222%" height="15" fill="rgb(226,22,26)" fg:x="564" fg:w="3"/><text x="4.4194%" y="527.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (3 samples, 0.02%)</title><rect x="4.1694%" y="501" width="0.0222%" height="15" fill="rgb(217,163,10)" fg:x="564" fg:w="3"/><text x="4.4194%" y="511.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.02%)</title><rect x="4.1694%" y="485" width="0.0222%" height="15" fill="rgb(213,25,53)" fg:x="564" fg:w="3"/><text x="4.4194%" y="495.50"></text></g><g><title>hashbrown::map::make_insert_hash (3 samples, 0.02%)</title><rect x="4.1694%" y="469" width="0.0222%" height="15" fill="rgb(252,105,26)" fg:x="564" fg:w="3"/><text x="4.4194%" y="479.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (24 samples, 0.18%)</title><rect x="4.1916%" y="533" width="0.1774%" height="15" fill="rgb(220,39,43)" fg:x="567" fg:w="24"/><text x="4.4416%" y="543.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (24 samples, 0.18%)</title><rect x="4.1916%" y="517" width="0.1774%" height="15" fill="rgb(229,68,48)" fg:x="567" fg:w="24"/><text x="4.4416%" y="527.50"></text></g><g><title>hashbrown::map::make_insert_hash (24 samples, 0.18%)</title><rect x="4.1916%" y="501" width="0.1774%" height="15" fill="rgb(252,8,32)" fg:x="567" fg:w="24"/><text x="4.4416%" y="511.50"></text></g><g><title>[[stack]] (234 samples, 1.73%)</title><rect x="2.8018%" y="565" width="1.7299%" height="15" fill="rgb(223,20,43)" fg:x="379" fg:w="234"/><text x="3.0518%" y="575.50"></text></g><g><title>sarsa::TdAgent::train (74 samples, 0.55%)</title><rect x="3.9846%" y="549" width="0.5471%" height="15" fill="rgb(229,81,49)" fg:x="539" fg:w="74"/><text x="4.2346%" y="559.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (22 samples, 0.16%)</title><rect x="4.3690%" y="533" width="0.1626%" height="15" fill="rgb(236,28,36)" fg:x="591" fg:w="22"/><text x="4.6190%" y="543.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (22 samples, 0.16%)</title><rect x="4.3690%" y="517" width="0.1626%" height="15" fill="rgb(249,185,26)" fg:x="591" fg:w="22"/><text x="4.6190%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (22 samples, 0.16%)</title><rect x="4.3690%" y="501" width="0.1626%" height="15" fill="rgb(249,174,33)" fg:x="591" fg:w="22"/><text x="4.6190%" y="511.50"></text></g><g><title>hashbrown::map::make_hash (22 samples, 0.16%)</title><rect x="4.3690%" y="485" width="0.1626%" height="15" fill="rgb(233,201,37)" fg:x="591" fg:w="22"/><text x="4.6190%" y="495.50"></text></g><g><title>rand::rng::Rng::gen (5 samples, 0.04%)</title><rect x="5.5519%" y="277" width="0.0370%" height="15" fill="rgb(221,78,26)" fg:x="751" fg:w="5"/><text x="5.8019%" y="287.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (5 samples, 0.04%)</title><rect x="5.5519%" y="261" width="0.0370%" height="15" fill="rgb(250,127,30)" fg:x="751" fg:w="5"/><text x="5.8019%" y="271.50"></text></g><g><title>rand::rng::Rng::gen (4 samples, 0.03%)</title><rect x="5.5593%" y="245" width="0.0296%" height="15" fill="rgb(230,49,44)" fg:x="752" fg:w="4"/><text x="5.8093%" y="255.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u64&gt; for rand::distributions::Standard&gt;::sample (4 samples, 0.03%)</title><rect x="5.5593%" y="229" width="0.0296%" height="15" fill="rgb(229,67,23)" fg:x="752" fg:w="4"/><text x="5.8093%" y="239.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u64 (4 samples, 0.03%)</title><rect x="5.5593%" y="213" width="0.0296%" height="15" fill="rgb(249,83,47)" fg:x="752" fg:w="4"/><text x="5.8093%" y="223.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u64 (4 samples, 0.03%)</title><rect x="5.5593%" y="197" width="0.0296%" height="15" fill="rgb(215,43,3)" fg:x="752" fg:w="4"/><text x="5.8093%" y="207.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u64 (4 samples, 0.03%)</title><rect x="5.5593%" y="181" width="0.0296%" height="15" fill="rgb(238,154,13)" fg:x="752" fg:w="4"/><text x="5.8093%" y="191.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (3 samples, 0.02%)</title><rect x="5.5666%" y="165" width="0.0222%" height="15" fill="rgb(219,56,2)" fg:x="753" fg:w="3"/><text x="5.8166%" y="175.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.01%)</title><rect x="5.5740%" y="149" width="0.0148%" height="15" fill="rgb(233,0,4)" fg:x="754" fg:w="2"/><text x="5.8240%" y="159.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.01%)</title><rect x="5.5740%" y="133" width="0.0148%" height="15" fill="rgb(235,30,7)" fg:x="754" fg:w="2"/><text x="5.8240%" y="143.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (2 samples, 0.01%)</title><rect x="5.5740%" y="117" width="0.0148%" height="15" fill="rgb(250,79,13)" fg:x="754" fg:w="2"/><text x="5.8240%" y="127.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (2 samples, 0.01%)</title><rect x="5.5740%" y="101" width="0.0148%" height="15" fill="rgb(211,146,34)" fg:x="754" fg:w="2"/><text x="5.8240%" y="111.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (2 samples, 0.01%)</title><rect x="5.5740%" y="85" width="0.0148%" height="15" fill="rgb(228,22,38)" fg:x="754" fg:w="2"/><text x="5.8240%" y="95.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (2 samples, 0.01%)</title><rect x="5.5740%" y="69" width="0.0148%" height="15" fill="rgb(235,168,5)" fg:x="754" fg:w="2"/><text x="5.8240%" y="79.50"></text></g><g><title>rand_chacha::guts::round (2 samples, 0.01%)</title><rect x="5.5740%" y="53" width="0.0148%" height="15" fill="rgb(221,155,16)" fg:x="754" fg:w="2"/><text x="5.8240%" y="63.50"></text></g><g><title>rand::rng::Rng::gen_range (6 samples, 0.04%)</title><rect x="5.5888%" y="277" width="0.0444%" height="15" fill="rgb(215,215,53)" fg:x="756" fg:w="6"/><text x="5.8388%" y="287.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (6 samples, 0.04%)</title><rect x="5.5888%" y="261" width="0.0444%" height="15" fill="rgb(223,4,10)" fg:x="756" fg:w="6"/><text x="5.8388%" y="271.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;i8&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (6 samples, 0.04%)</title><rect x="5.5888%" y="245" width="0.0444%" height="15" fill="rgb(234,103,6)" fg:x="756" fg:w="6"/><text x="5.8388%" y="255.50"></text></g><g><title>rand::rng::Rng::gen (6 samples, 0.04%)</title><rect x="5.5888%" y="229" width="0.0444%" height="15" fill="rgb(227,97,0)" fg:x="756" fg:w="6"/><text x="5.8388%" y="239.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (6 samples, 0.04%)</title><rect x="5.5888%" y="213" width="0.0444%" height="15" fill="rgb(234,150,53)" fg:x="756" fg:w="6"/><text x="5.8388%" y="223.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (6 samples, 0.04%)</title><rect x="5.5888%" y="197" width="0.0444%" height="15" fill="rgb(228,201,54)" fg:x="756" fg:w="6"/><text x="5.8388%" y="207.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (6 samples, 0.04%)</title><rect x="5.5888%" y="181" width="0.0444%" height="15" fill="rgb(222,22,37)" fg:x="756" fg:w="6"/><text x="5.8388%" y="191.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (6 samples, 0.04%)</title><rect x="5.5888%" y="165" width="0.0444%" height="15" fill="rgb(237,53,32)" fg:x="756" fg:w="6"/><text x="5.8388%" y="175.50"></text></g><g><title>rand_core::block::BlockRng&lt;R&gt;::generate_and_set (2 samples, 0.01%)</title><rect x="5.6184%" y="149" width="0.0148%" height="15" fill="rgb(233,25,53)" fg:x="760" fg:w="2"/><text x="5.8684%" y="159.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingCore&lt;R,Rsdr&gt; as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.01%)</title><rect x="5.6184%" y="133" width="0.0148%" height="15" fill="rgb(210,40,34)" fg:x="760" fg:w="2"/><text x="5.8684%" y="143.50"></text></g><g><title>&lt;rand_chacha::chacha::ChaCha12Core as rand_core::block::BlockRngCore&gt;::generate (2 samples, 0.01%)</title><rect x="5.6184%" y="117" width="0.0148%" height="15" fill="rgb(241,220,44)" fg:x="760" fg:w="2"/><text x="5.8684%" y="127.50"></text></g><g><title>rand_chacha::guts::ChaCha::refill4 (2 samples, 0.01%)</title><rect x="5.6184%" y="101" width="0.0148%" height="15" fill="rgb(235,28,35)" fg:x="760" fg:w="2"/><text x="5.8684%" y="111.50"></text></g><g><title>rand_chacha::guts::refill_wide::impl_avx2 (2 samples, 0.01%)</title><rect x="5.6184%" y="85" width="0.0148%" height="15" fill="rgb(210,56,17)" fg:x="760" fg:w="2"/><text x="5.8684%" y="95.50"></text></g><g><title>rand_chacha::guts::refill_wide::fn_impl (2 samples, 0.01%)</title><rect x="5.6184%" y="69" width="0.0148%" height="15" fill="rgb(224,130,29)" fg:x="760" fg:w="2"/><text x="5.8684%" y="79.50"></text></g><g><title>rand_chacha::guts::refill_wide_impl (2 samples, 0.01%)</title><rect x="5.6184%" y="53" width="0.0148%" height="15" fill="rgb(235,212,8)" fg:x="760" fg:w="2"/><text x="5.8684%" y="63.50"></text></g><g><title>rand_chacha::guts::round (2 samples, 0.01%)</title><rect x="5.6184%" y="37" width="0.0148%" height="15" fill="rgb(223,33,50)" fg:x="760" fg:w="2"/><text x="5.8684%" y="47.50"></text></g><g><title>&lt;rust_gym::easy_21::Easy21 as rust_gym::environment::Environment&gt;::act (16 samples, 0.12%)</title><rect x="5.5223%" y="309" width="0.1183%" height="15" fill="rgb(219,149,13)" fg:x="747" fg:w="16"/><text x="5.7723%" y="319.50"></text></g><g><title>rust_gym::easy_21::Easy21::draw_card (13 samples, 0.10%)</title><rect x="5.5445%" y="293" width="0.0961%" height="15" fill="rgb(250,156,29)" fg:x="750" fg:w="13"/><text x="5.7945%" y="303.50"></text></g><g><title>&lt;rust_gym::easy_21::Easy21 as rust_gym::environment::Environment&gt;::observe (2 samples, 0.01%)</title><rect x="5.6406%" y="309" width="0.0148%" height="15" fill="rgb(216,193,19)" fg:x="763" fg:w="2"/><text x="5.8906%" y="319.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (41 samples, 0.30%)</title><rect x="7.2152%" y="149" width="0.3031%" height="15" fill="rgb(216,135,14)" fg:x="976" fg:w="41"/><text x="7.4652%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (122 samples, 0.90%)</title><rect x="6.9195%" y="165" width="0.9019%" height="15" fill="rgb(241,47,5)" fg:x="936" fg:w="122"/><text x="7.1695%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (41 samples, 0.30%)</title><rect x="7.5183%" y="149" width="0.3031%" height="15" fill="rgb(233,42,35)" fg:x="1017" fg:w="41"/><text x="7.7683%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (188 samples, 1.39%)</title><rect x="8.9599%" y="149" width="1.3898%" height="15" fill="rgb(231,13,6)" fg:x="1212" fg:w="188"/><text x="9.2099%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (649 samples, 4.80%)</title><rect x="6.1654%" y="213" width="4.7978%" height="15" fill="rgb(207,181,40)" fg:x="834" fg:w="649"/><text x="6.4154%" y="223.50">&lt;std::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (649 samples, 4.80%)</title><rect x="6.1654%" y="197" width="4.7978%" height="15" fill="rgb(254,173,49)" fg:x="834" fg:w="649"/><text x="6.4154%" y="207.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (649 samples, 4.80%)</title><rect x="6.1654%" y="181" width="4.7978%" height="15" fill="rgb(221,1,38)" fg:x="834" fg:w="649"/><text x="6.4154%" y="191.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (425 samples, 3.14%)</title><rect x="7.8214%" y="165" width="3.1419%" height="15" fill="rgb(206,124,46)" fg:x="1058" fg:w="425"/><text x="8.0714%" y="175.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (83 samples, 0.61%)</title><rect x="10.3497%" y="149" width="0.6136%" height="15" fill="rgb(249,21,11)" fg:x="1400" fg:w="83"/><text x="10.5997%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (132 samples, 0.98%)</title><rect x="10.9633%" y="213" width="0.9758%" height="15" fill="rgb(222,201,40)" fg:x="1483" fg:w="132"/><text x="11.2133%" y="223.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (46 samples, 0.34%)</title><rect x="11.5990%" y="197" width="0.3401%" height="15" fill="rgb(235,61,29)" fg:x="1569" fg:w="46"/><text x="11.8490%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (46 samples, 0.34%)</title><rect x="11.5990%" y="181" width="0.3401%" height="15" fill="rgb(219,207,3)" fg:x="1569" fg:w="46"/><text x="11.8490%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (46 samples, 0.34%)</title><rect x="11.5990%" y="165" width="0.3401%" height="15" fill="rgb(222,56,46)" fg:x="1569" fg:w="46"/><text x="11.8490%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (68 samples, 0.50%)</title><rect x="14.2752%" y="53" width="0.5027%" height="15" fill="rgb(239,76,54)" fg:x="1931" fg:w="68"/><text x="14.5252%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (169 samples, 1.25%)</title><rect x="13.9425%" y="69" width="1.2494%" height="15" fill="rgb(231,124,27)" fg:x="1886" fg:w="169"/><text x="14.1925%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (56 samples, 0.41%)</title><rect x="14.7779%" y="53" width="0.4140%" height="15" fill="rgb(249,195,6)" fg:x="1999" fg:w="56"/><text x="15.0279%" y="63.50"></text></g><g><title>core::cmp::min (13 samples, 0.10%)</title><rect x="15.1918%" y="69" width="0.0961%" height="15" fill="rgb(237,174,47)" fg:x="2055" fg:w="13"/><text x="15.4418%" y="79.50"></text></g><g><title>core::cmp::Ord::min (13 samples, 0.10%)</title><rect x="15.1918%" y="53" width="0.0961%" height="15" fill="rgb(206,201,31)" fg:x="2055" fg:w="13"/><text x="15.4418%" y="63.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (730 samples, 5.40%)</title><rect x="11.9539%" y="117" width="5.3966%" height="15" fill="rgb(231,57,52)" fg:x="1617" fg:w="730"/><text x="12.2039%" y="127.50">&lt;std::c..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (714 samples, 5.28%)</title><rect x="12.0722%" y="101" width="5.2783%" height="15" fill="rgb(248,177,22)" fg:x="1633" fg:w="714"/><text x="12.3222%" y="111.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (714 samples, 5.28%)</title><rect x="12.0722%" y="85" width="5.2783%" height="15" fill="rgb(215,211,37)" fg:x="1633" fg:w="714"/><text x="12.3222%" y="95.50">&lt;core:..</text></g><g><title>core::hash::sip::u8to64_le (279 samples, 2.06%)</title><rect x="15.2879%" y="69" width="2.0625%" height="15" fill="rgb(241,128,51)" fg:x="2068" fg:w="279"/><text x="15.5379%" y="79.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.07%)</title><rect x="17.2766%" y="53" width="0.0739%" height="15" fill="rgb(227,165,31)" fg:x="2337" fg:w="10"/><text x="17.5266%" y="63.50"></text></g><g><title>&lt;rust_gym::easy_21::Action as core::hash::Hash&gt;::hash (775 samples, 5.73%)</title><rect x="11.9391%" y="181" width="5.7293%" height="15" fill="rgb(228,167,24)" fg:x="1615" fg:w="775"/><text x="12.1891%" y="191.50">&lt;rust_g..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (773 samples, 5.71%)</title><rect x="11.9539%" y="165" width="5.7145%" height="15" fill="rgb(228,143,12)" fg:x="1617" fg:w="773"/><text x="12.2039%" y="175.50">core::h..</text></g><g><title>core::hash::Hasher::write_isize (773 samples, 5.71%)</title><rect x="11.9539%" y="149" width="5.7145%" height="15" fill="rgb(249,149,8)" fg:x="1617" fg:w="773"/><text x="12.2039%" y="159.50">core::h..</text></g><g><title>core::hash::Hasher::write_usize (773 samples, 5.71%)</title><rect x="11.9539%" y="133" width="5.7145%" height="15" fill="rgb(243,35,44)" fg:x="1617" fg:w="773"/><text x="12.2039%" y="143.50">core::h..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (43 samples, 0.32%)</title><rect x="17.3505%" y="117" width="0.3179%" height="15" fill="rgb(246,89,9)" fg:x="2347" fg:w="43"/><text x="17.6005%" y="127.50"></text></g><g><title>core::cmp::min (34 samples, 0.25%)</title><rect x="20.2632%" y="69" width="0.2513%" height="15" fill="rgb(233,213,13)" fg:x="2741" fg:w="34"/><text x="20.5132%" y="79.50"></text></g><g><title>core::cmp::Ord::min (34 samples, 0.25%)</title><rect x="20.2632%" y="53" width="0.2513%" height="15" fill="rgb(233,141,41)" fg:x="2741" fg:w="34"/><text x="20.5132%" y="63.50"></text></g><g><title>hashbrown::map::make_hash (2,240 samples, 16.56%)</title><rect x="6.1581%" y="245" width="16.5595%" height="15" fill="rgb(239,167,4)" fg:x="833" fg:w="2240"/><text x="6.4081%" y="255.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (2,239 samples, 16.55%)</title><rect x="6.1654%" y="229" width="16.5521%" height="15" fill="rgb(209,217,16)" fg:x="834" fg:w="2239"/><text x="6.4154%" y="239.50">core::hash::BuildHasher::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,458 samples, 10.78%)</title><rect x="11.9391%" y="213" width="10.7784%" height="15" fill="rgb(219,88,35)" fg:x="1615" fg:w="1458"/><text x="12.1891%" y="223.50">core::hash::impl..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (1,458 samples, 10.78%)</title><rect x="11.9391%" y="197" width="10.7784%" height="15" fill="rgb(220,193,23)" fg:x="1615" fg:w="1458"/><text x="12.1891%" y="207.50">core::hash::impl..</text></g><g><title>&lt;rust_gym::easy_21::Observation as core::hash::Hash&gt;::hash (683 samples, 5.05%)</title><rect x="17.6684%" y="181" width="5.0492%" height="15" fill="rgb(230,90,52)" fg:x="2390" fg:w="683"/><text x="17.9184%" y="191.50">&lt;rust_..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i8&gt;::hash (683 samples, 5.05%)</title><rect x="17.6684%" y="165" width="5.0492%" height="15" fill="rgb(252,106,19)" fg:x="2390" fg:w="683"/><text x="17.9184%" y="175.50">core::..</text></g><g><title>core::hash::Hasher::write_i8 (682 samples, 5.04%)</title><rect x="17.6758%" y="149" width="5.0418%" height="15" fill="rgb(206,74,20)" fg:x="2391" fg:w="682"/><text x="17.9258%" y="159.50">core::..</text></g><g><title>core::hash::Hasher::write_u8 (682 samples, 5.04%)</title><rect x="17.6758%" y="133" width="5.0418%" height="15" fill="rgb(230,138,44)" fg:x="2391" fg:w="682"/><text x="17.9258%" y="143.50">core::..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (581 samples, 4.30%)</title><rect x="18.4224%" y="117" width="4.2951%" height="15" fill="rgb(235,182,43)" fg:x="2492" fg:w="581"/><text x="18.6724%" y="127.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (581 samples, 4.30%)</title><rect x="18.4224%" y="101" width="4.2951%" height="15" fill="rgb(242,16,51)" fg:x="2492" fg:w="581"/><text x="18.6724%" y="111.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (581 samples, 4.30%)</title><rect x="18.4224%" y="85" width="4.2951%" height="15" fill="rgb(248,9,4)" fg:x="2492" fg:w="581"/><text x="18.6724%" y="95.50">&lt;core..</text></g><g><title>core::hash::sip::u8to64_le (298 samples, 2.20%)</title><rect x="20.5145%" y="69" width="2.2030%" height="15" fill="rgb(210,31,22)" fg:x="2775" fg:w="298"/><text x="20.7645%" y="79.50">c..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (28 samples, 0.21%)</title><rect x="23.3829%" y="197" width="0.2070%" height="15" fill="rgb(239,54,39)" fg:x="3163" fg:w="28"/><text x="23.6329%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (28 samples, 0.21%)</title><rect x="23.3829%" y="181" width="0.2070%" height="15" fill="rgb(230,99,41)" fg:x="3163" fg:w="28"/><text x="23.6329%" y="191.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (414 samples, 3.06%)</title><rect x="23.5899%" y="181" width="3.0605%" height="15" fill="rgb(253,106,12)" fg:x="3191" fg:w="414"/><text x="23.8399%" y="191.50">has..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (414 samples, 3.06%)</title><rect x="23.5899%" y="165" width="3.0605%" height="15" fill="rgb(213,46,41)" fg:x="3191" fg:w="414"/><text x="23.8399%" y="175.50">cor..</text></g><g><title>&lt;rust_gym::easy_21::Observation as core::cmp::PartialEq&gt;::eq (208 samples, 1.54%)</title><rect x="25.1127%" y="149" width="1.5377%" height="15" fill="rgb(215,133,35)" fg:x="3397" fg:w="208"/><text x="25.3627%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (465 samples, 3.44%)</title><rect x="23.5899%" y="197" width="3.4376%" height="15" fill="rgb(213,28,5)" fg:x="3191" fg:w="465"/><text x="23.8399%" y="207.50">has..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (51 samples, 0.38%)</title><rect x="26.6504%" y="181" width="0.3770%" height="15" fill="rgb(215,77,49)" fg:x="3605" fg:w="51"/><text x="26.9004%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (51 samples, 0.38%)</title><rect x="26.6504%" y="165" width="0.3770%" height="15" fill="rgb(248,100,22)" fg:x="3605" fg:w="51"/><text x="26.9004%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (51 samples, 0.38%)</title><rect x="26.6504%" y="149" width="0.3770%" height="15" fill="rgb(208,67,9)" fg:x="3605" fg:w="51"/><text x="26.9004%" y="159.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (51 samples, 0.38%)</title><rect x="26.6504%" y="133" width="0.3770%" height="15" fill="rgb(219,133,21)" fg:x="3605" fg:w="51"/><text x="26.9004%" y="143.50"></text></g><g><title>hashbrown::raw::h2 (87 samples, 0.64%)</title><rect x="27.0348%" y="197" width="0.6432%" height="15" fill="rgb(246,46,29)" fg:x="3657" fg:w="87"/><text x="27.2848%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (14 samples, 0.10%)</title><rect x="27.6780%" y="197" width="0.1035%" height="15" fill="rgb(246,185,52)" fg:x="3744" fg:w="14"/><text x="27.9280%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (14 samples, 0.10%)</title><rect x="27.6780%" y="181" width="0.1035%" height="15" fill="rgb(252,136,11)" fg:x="3744" fg:w="14"/><text x="27.9280%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (14 samples, 0.10%)</title><rect x="27.6780%" y="165" width="0.1035%" height="15" fill="rgb(219,138,53)" fg:x="3744" fg:w="14"/><text x="27.9280%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (3,052 samples, 22.56%)</title><rect x="5.6554%" y="309" width="22.5623%" height="15" fill="rgb(211,51,23)" fg:x="765" fg:w="3052"/><text x="5.9054%" y="319.50">&lt;std::collections::hash::map::HashMa..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (3,052 samples, 22.56%)</title><rect x="5.6554%" y="293" width="22.5623%" height="15" fill="rgb(247,221,28)" fg:x="765" fg:w="3052"/><text x="5.9054%" y="303.50">std::collections::hash::map::HashMap..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (3,052 samples, 22.56%)</title><rect x="5.6554%" y="277" width="22.5623%" height="15" fill="rgb(251,222,45)" fg:x="765" fg:w="3052"/><text x="5.9054%" y="287.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::get</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (3,052 samples, 22.56%)</title><rect x="5.6554%" y="261" width="22.5623%" height="15" fill="rgb(217,162,53)" fg:x="765" fg:w="3052"/><text x="5.9054%" y="271.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::ge..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (744 samples, 5.50%)</title><rect x="22.7175%" y="245" width="5.5001%" height="15" fill="rgb(229,93,14)" fg:x="3073" fg:w="744"/><text x="22.9675%" y="255.50">hashbro..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (744 samples, 5.50%)</title><rect x="22.7175%" y="229" width="5.5001%" height="15" fill="rgb(209,67,49)" fg:x="3073" fg:w="744"/><text x="22.9675%" y="239.50">hashbro..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (744 samples, 5.50%)</title><rect x="22.7175%" y="213" width="5.5001%" height="15" fill="rgb(213,87,29)" fg:x="3073" fg:w="744"/><text x="22.9675%" y="223.50">hashbro..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (59 samples, 0.44%)</title><rect x="27.7815%" y="197" width="0.4362%" height="15" fill="rgb(205,151,52)" fg:x="3758" fg:w="59"/><text x="28.0315%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (59 samples, 0.44%)</title><rect x="27.7815%" y="181" width="0.4362%" height="15" fill="rgb(253,215,39)" fg:x="3758" fg:w="59"/><text x="28.0315%" y="191.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (24 samples, 0.18%)</title><rect x="28.4912%" y="245" width="0.1774%" height="15" fill="rgb(221,220,41)" fg:x="3854" fg:w="24"/><text x="28.7412%" y="255.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (2 samples, 0.01%)</title><rect x="28.6982%" y="229" width="0.0148%" height="15" fill="rgb(218,133,21)" fg:x="3882" fg:w="2"/><text x="28.9482%" y="239.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::offset (2 samples, 0.01%)</title><rect x="28.6982%" y="213" width="0.0148%" height="15" fill="rgb(221,193,43)" fg:x="3882" fg:w="2"/><text x="28.9482%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::next_n (48 samples, 0.35%)</title><rect x="28.7129%" y="229" width="0.3548%" height="15" fill="rgb(240,128,52)" fg:x="3884" fg:w="48"/><text x="28.9629%" y="239.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (48 samples, 0.35%)</title><rect x="28.7129%" y="213" width="0.3548%" height="15" fill="rgb(253,114,12)" fg:x="3884" fg:w="48"/><text x="28.9629%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (48 samples, 0.35%)</title><rect x="28.7129%" y="197" width="0.3548%" height="15" fill="rgb(215,223,47)" fg:x="3884" fg:w="48"/><text x="28.9629%" y="207.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (7 samples, 0.05%)</title><rect x="29.0678%" y="229" width="0.0517%" height="15" fill="rgb(248,225,23)" fg:x="3932" fg:w="7"/><text x="29.3178%" y="239.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (3 samples, 0.02%)</title><rect x="29.1195%" y="213" width="0.0222%" height="15" fill="rgb(250,108,0)" fg:x="3939" fg:w="3"/><text x="29.3695%" y="223.50"></text></g><g><title>&lt;std::collections::hash::map::Keys&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (126 samples, 0.93%)</title><rect x="28.2176%" y="309" width="0.9315%" height="15" fill="rgb(228,208,7)" fg:x="3817" fg:w="126"/><text x="28.4676%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (126 samples, 0.93%)</title><rect x="28.2176%" y="293" width="0.9315%" height="15" fill="rgb(244,45,10)" fg:x="3817" fg:w="126"/><text x="28.4676%" y="303.50"></text></g><g><title>&lt;hashbrown::map::Iter&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (126 samples, 0.93%)</title><rect x="28.2176%" y="277" width="0.9315%" height="15" fill="rgb(207,125,25)" fg:x="3817" fg:w="126"/><text x="28.4676%" y="287.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (126 samples, 0.93%)</title><rect x="28.2176%" y="261" width="0.9315%" height="15" fill="rgb(210,195,18)" fg:x="3817" fg:w="126"/><text x="28.4676%" y="271.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (65 samples, 0.48%)</title><rect x="28.6686%" y="245" width="0.4805%" height="15" fill="rgb(249,80,12)" fg:x="3878" fg:w="65"/><text x="28.9186%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (4 samples, 0.03%)</title><rect x="29.1195%" y="229" width="0.0296%" height="15" fill="rgb(221,65,9)" fg:x="3939" fg:w="4"/><text x="29.3695%" y="239.50"></text></g><g><title>rand::rng::Rng::gen_range (3 samples, 0.02%)</title><rect x="29.1491%" y="293" width="0.0222%" height="15" fill="rgb(235,49,36)" fg:x="3943" fg:w="3"/><text x="29.3991%" y="303.50"></text></g><g><title>&lt;core::ops::range::RangeInclusive&lt;T&gt; as rand::distributions::uniform::SampleRange&lt;T&gt;&gt;::sample_single (3 samples, 0.02%)</title><rect x="29.1491%" y="277" width="0.0222%" height="15" fill="rgb(225,32,20)" fg:x="3943" fg:w="3"/><text x="29.3991%" y="287.50"></text></g><g><title>&lt;rand::distributions::uniform::UniformInt&lt;i8&gt; as rand::distributions::uniform::UniformSampler&gt;::sample_single_inclusive (3 samples, 0.02%)</title><rect x="29.1491%" y="261" width="0.0222%" height="15" fill="rgb(215,141,46)" fg:x="3943" fg:w="3"/><text x="29.3991%" y="271.50"></text></g><g><title>rand::rng::Rng::gen (2 samples, 0.01%)</title><rect x="29.1565%" y="245" width="0.0148%" height="15" fill="rgb(250,160,47)" fg:x="3944" fg:w="2"/><text x="29.4065%" y="255.50"></text></g><g><title>rand::distributions::integer::&lt;impl rand::distributions::distribution::Distribution&lt;u32&gt; for rand::distributions::Standard&gt;::sample (2 samples, 0.01%)</title><rect x="29.1565%" y="229" width="0.0148%" height="15" fill="rgb(216,222,40)" fg:x="3944" fg:w="2"/><text x="29.4065%" y="239.50"></text></g><g><title>&lt;rand::rngs::thread::ThreadRng as rand_core::RngCore&gt;::next_u32 (2 samples, 0.01%)</title><rect x="29.1565%" y="213" width="0.0148%" height="15" fill="rgb(234,217,39)" fg:x="3944" fg:w="2"/><text x="29.4065%" y="223.50"></text></g><g><title>&lt;rand::rngs::adapter::reseeding::ReseedingRng&lt;R,Rsdr&gt; as rand_core::RngCore&gt;::next_u32 (2 samples, 0.01%)</title><rect x="29.1565%" y="197" width="0.0148%" height="15" fill="rgb(207,178,40)" fg:x="3944" fg:w="2"/><text x="29.4065%" y="207.50"></text></g><g><title>&lt;rand_core::block::BlockRng&lt;R&gt; as rand_core::RngCore&gt;::next_u32 (2 samples, 0.01%)</title><rect x="29.1565%" y="181" width="0.0148%" height="15" fill="rgb(221,136,13)" fg:x="3944" fg:w="2"/><text x="29.4065%" y="191.50"></text></g><g><title>rust_gym::easy_21::Easy21::reset (7 samples, 0.05%)</title><rect x="29.1491%" y="309" width="0.0517%" height="15" fill="rgb(249,199,10)" fg:x="3943" fg:w="7"/><text x="29.3991%" y="319.50"></text></g><g><title>rand::rngs::thread::thread_rng (4 samples, 0.03%)</title><rect x="29.1713%" y="293" width="0.0296%" height="15" fill="rgb(249,222,13)" fg:x="3946" fg:w="4"/><text x="29.4213%" y="303.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::with (4 samples, 0.03%)</title><rect x="29.1713%" y="277" width="0.0296%" height="15" fill="rgb(244,185,38)" fg:x="3946" fg:w="4"/><text x="29.4213%" y="287.50"></text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (4 samples, 0.03%)</title><rect x="29.1713%" y="261" width="0.0296%" height="15" fill="rgb(236,202,9)" fg:x="3946" fg:w="4"/><text x="29.4213%" y="271.50"></text></g><g><title>rand::rngs::thread::thread_rng::{{closure}} (3 samples, 0.02%)</title><rect x="29.1787%" y="245" width="0.0222%" height="15" fill="rgb(250,229,37)" fg:x="3947" fg:w="3"/><text x="29.4287%" y="255.50"></text></g><g><title>&lt;alloc::rc::Rc&lt;T&gt; as core::clone::Clone&gt;::clone (3 samples, 0.02%)</title><rect x="29.1787%" y="229" width="0.0222%" height="15" fill="rgb(206,174,23)" fg:x="3947" fg:w="3"/><text x="29.4287%" y="239.50"></text></g><g><title>alloc::rc::RcInnerPtr::inc_strong (3 samples, 0.02%)</title><rect x="29.1787%" y="213" width="0.0222%" height="15" fill="rgb(211,33,43)" fg:x="3947" fg:w="3"/><text x="29.4287%" y="223.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::set (3 samples, 0.02%)</title><rect x="29.1787%" y="197" width="0.0222%" height="15" fill="rgb(245,58,50)" fg:x="3947" fg:w="3"/><text x="29.4287%" y="207.50"></text></g><g><title>core::cell::Cell&lt;T&gt;::replace (3 samples, 0.02%)</title><rect x="29.1787%" y="181" width="0.0222%" height="15" fill="rgb(244,68,36)" fg:x="3947" fg:w="3"/><text x="29.4287%" y="191.50"></text></g><g><title>core::mem::replace (3 samples, 0.02%)</title><rect x="29.1787%" y="165" width="0.0222%" height="15" fill="rgb(232,229,15)" fg:x="3947" fg:w="3"/><text x="29.4287%" y="175.50"></text></g><g><title>core::ptr::write (3 samples, 0.02%)</title><rect x="29.1787%" y="149" width="0.0222%" height="15" fill="rgb(254,30,23)" fg:x="3947" fg:w="3"/><text x="29.4287%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (7 samples, 0.05%)</title><rect x="29.2083%" y="229" width="0.0517%" height="15" fill="rgb(235,160,14)" fg:x="3951" fg:w="7"/><text x="29.4583%" y="239.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (7 samples, 0.05%)</title><rect x="29.2083%" y="213" width="0.0517%" height="15" fill="rgb(212,155,44)" fg:x="3951" fg:w="7"/><text x="29.4583%" y="223.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (7 samples, 0.05%)</title><rect x="29.2083%" y="197" width="0.0517%" height="15" fill="rgb(226,2,50)" fg:x="3951" fg:w="7"/><text x="29.4583%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (4 samples, 0.03%)</title><rect x="29.2304%" y="181" width="0.0296%" height="15" fill="rgb(234,177,6)" fg:x="3954" fg:w="4"/><text x="29.4804%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (4 samples, 0.03%)</title><rect x="29.2304%" y="165" width="0.0296%" height="15" fill="rgb(217,24,9)" fg:x="3954" fg:w="4"/><text x="29.4804%" y="175.50"></text></g><g><title>hashbrown::map::make_insert_hash (12 samples, 0.09%)</title><rect x="29.2009%" y="261" width="0.0887%" height="15" fill="rgb(220,13,46)" fg:x="3950" fg:w="12"/><text x="29.4509%" y="271.50"></text></g><g><title>core::hash::BuildHasher::hash_one (11 samples, 0.08%)</title><rect x="29.2083%" y="245" width="0.0813%" height="15" fill="rgb(239,221,27)" fg:x="3951" fg:w="11"/><text x="29.4583%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.03%)</title><rect x="29.2600%" y="229" width="0.0296%" height="15" fill="rgb(222,198,25)" fg:x="3958" fg:w="4"/><text x="29.5100%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (4 samples, 0.03%)</title><rect x="29.2600%" y="213" width="0.0296%" height="15" fill="rgb(211,99,13)" fg:x="3958" fg:w="4"/><text x="29.5100%" y="223.50"></text></g><g><title>&lt;rust_gym::easy_21::Action as core::hash::Hash&gt;::hash (4 samples, 0.03%)</title><rect x="29.2600%" y="197" width="0.0296%" height="15" fill="rgb(232,111,31)" fg:x="3958" fg:w="4"/><text x="29.5100%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (4 samples, 0.03%)</title><rect x="29.2600%" y="181" width="0.0296%" height="15" fill="rgb(245,82,37)" fg:x="3958" fg:w="4"/><text x="29.5100%" y="191.50"></text></g><g><title>core::hash::Hasher::write_isize (4 samples, 0.03%)</title><rect x="29.2600%" y="165" width="0.0296%" height="15" fill="rgb(227,149,46)" fg:x="3958" fg:w="4"/><text x="29.5100%" y="175.50"></text></g><g><title>core::hash::Hasher::write_usize (4 samples, 0.03%)</title><rect x="29.2600%" y="149" width="0.0296%" height="15" fill="rgb(218,36,50)" fg:x="3958" fg:w="4"/><text x="29.5100%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="29.2600%" y="133" width="0.0296%" height="15" fill="rgb(226,80,48)" fg:x="3958" fg:w="4"/><text x="29.5100%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="29.2600%" y="117" width="0.0296%" height="15" fill="rgb(238,224,15)" fg:x="3958" fg:w="4"/><text x="29.5100%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.03%)</title><rect x="29.2600%" y="101" width="0.0296%" height="15" fill="rgb(241,136,10)" fg:x="3958" fg:w="4"/><text x="29.5100%" y="111.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (2 samples, 0.01%)</title><rect x="29.2970%" y="213" width="0.0148%" height="15" fill="rgb(208,32,45)" fg:x="3963" fg:w="2"/><text x="29.5470%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (2 samples, 0.01%)</title><rect x="29.2970%" y="197" width="0.0148%" height="15" fill="rgb(207,135,9)" fg:x="3963" fg:w="2"/><text x="29.5470%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (2 samples, 0.01%)</title><rect x="29.2970%" y="181" width="0.0148%" height="15" fill="rgb(206,86,44)" fg:x="3963" fg:w="2"/><text x="29.5470%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (2 samples, 0.01%)</title><rect x="29.2970%" y="165" width="0.0148%" height="15" fill="rgb(245,177,15)" fg:x="3963" fg:w="2"/><text x="29.5470%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (4 samples, 0.03%)</title><rect x="29.2970%" y="229" width="0.0296%" height="15" fill="rgb(206,64,50)" fg:x="3963" fg:w="4"/><text x="29.5470%" y="239.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (2 samples, 0.01%)</title><rect x="29.3117%" y="213" width="0.0148%" height="15" fill="rgb(234,36,40)" fg:x="3965" fg:w="2"/><text x="29.5617%" y="223.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (2 samples, 0.01%)</title><rect x="29.3117%" y="197" width="0.0148%" height="15" fill="rgb(213,64,8)" fg:x="3965" fg:w="2"/><text x="29.5617%" y="207.50"></text></g><g><title>sarsa::TdAgent::compute_delta (19 samples, 0.14%)</title><rect x="29.2009%" y="309" width="0.1405%" height="15" fill="rgb(210,75,36)" fg:x="3950" fg:w="19"/><text x="29.4509%" y="319.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (19 samples, 0.14%)</title><rect x="29.2009%" y="293" width="0.1405%" height="15" fill="rgb(229,88,21)" fg:x="3950" fg:w="19"/><text x="29.4509%" y="303.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (19 samples, 0.14%)</title><rect x="29.2009%" y="277" width="0.1405%" height="15" fill="rgb(252,204,47)" fg:x="3950" fg:w="19"/><text x="29.4509%" y="287.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (7 samples, 0.05%)</title><rect x="29.2896%" y="261" width="0.0517%" height="15" fill="rgb(208,77,27)" fg:x="3962" fg:w="7"/><text x="29.5396%" y="271.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (6 samples, 0.04%)</title><rect x="29.2970%" y="245" width="0.0444%" height="15" fill="rgb(221,76,26)" fg:x="3963" fg:w="6"/><text x="29.5470%" y="255.50"></text></g><g><title>hashbrown::raw::h2 (2 samples, 0.01%)</title><rect x="29.3265%" y="229" width="0.0148%" height="15" fill="rgb(225,139,18)" fg:x="3967" fg:w="2"/><text x="29.5765%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (2 samples, 0.01%)</title><rect x="29.3561%" y="133" width="0.0148%" height="15" fill="rgb(230,137,11)" fg:x="3971" fg:w="2"/><text x="29.6061%" y="143.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="29.3413%" y="197" width="0.0370%" height="15" fill="rgb(212,28,1)" fg:x="3969" fg:w="5"/><text x="29.5913%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="29.3413%" y="181" width="0.0370%" height="15" fill="rgb(248,164,17)" fg:x="3969" fg:w="5"/><text x="29.5913%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="29.3413%" y="165" width="0.0370%" height="15" fill="rgb(222,171,42)" fg:x="3969" fg:w="5"/><text x="29.5913%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (3 samples, 0.02%)</title><rect x="29.3561%" y="149" width="0.0222%" height="15" fill="rgb(243,84,45)" fg:x="3971" fg:w="3"/><text x="29.6061%" y="159.50"></text></g><g><title>&lt;rust_gym::easy_21::Action as core::hash::Hash&gt;::hash (2 samples, 0.01%)</title><rect x="29.3783%" y="165" width="0.0148%" height="15" fill="rgb(252,49,23)" fg:x="3974" fg:w="2"/><text x="29.6283%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (2 samples, 0.01%)</title><rect x="29.3783%" y="149" width="0.0148%" height="15" fill="rgb(215,19,7)" fg:x="3974" fg:w="2"/><text x="29.6283%" y="159.50"></text></g><g><title>core::hash::Hasher::write_isize (2 samples, 0.01%)</title><rect x="29.3783%" y="133" width="0.0148%" height="15" fill="rgb(238,81,41)" fg:x="3974" fg:w="2"/><text x="29.6283%" y="143.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.01%)</title><rect x="29.3783%" y="117" width="0.0148%" height="15" fill="rgb(210,199,37)" fg:x="3974" fg:w="2"/><text x="29.6283%" y="127.50"></text></g><g><title>sarsa::TdAgent::compute_step_size (9 samples, 0.07%)</title><rect x="29.3413%" y="309" width="0.0665%" height="15" fill="rgb(244,192,49)" fg:x="3969" fg:w="9"/><text x="29.5913%" y="319.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (9 samples, 0.07%)</title><rect x="29.3413%" y="293" width="0.0665%" height="15" fill="rgb(226,211,11)" fg:x="3969" fg:w="9"/><text x="29.5913%" y="303.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (9 samples, 0.07%)</title><rect x="29.3413%" y="277" width="0.0665%" height="15" fill="rgb(236,162,54)" fg:x="3969" fg:w="9"/><text x="29.5913%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (9 samples, 0.07%)</title><rect x="29.3413%" y="261" width="0.0665%" height="15" fill="rgb(220,229,9)" fg:x="3969" fg:w="9"/><text x="29.5913%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (9 samples, 0.07%)</title><rect x="29.3413%" y="245" width="0.0665%" height="15" fill="rgb(250,87,22)" fg:x="3969" fg:w="9"/><text x="29.5913%" y="255.50"></text></g><g><title>hashbrown::map::make_hash (9 samples, 0.07%)</title><rect x="29.3413%" y="229" width="0.0665%" height="15" fill="rgb(239,43,17)" fg:x="3969" fg:w="9"/><text x="29.5913%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (9 samples, 0.07%)</title><rect x="29.3413%" y="213" width="0.0665%" height="15" fill="rgb(231,177,25)" fg:x="3969" fg:w="9"/><text x="29.5913%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.03%)</title><rect x="29.3783%" y="197" width="0.0296%" height="15" fill="rgb(219,179,1)" fg:x="3974" fg:w="4"/><text x="29.6283%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (4 samples, 0.03%)</title><rect x="29.3783%" y="181" width="0.0296%" height="15" fill="rgb(238,219,53)" fg:x="3974" fg:w="4"/><text x="29.6283%" y="191.50"></text></g><g><title>&lt;rust_gym::easy_21::Observation as core::hash::Hash&gt;::hash (2 samples, 0.01%)</title><rect x="29.3931%" y="165" width="0.0148%" height="15" fill="rgb(232,167,36)" fg:x="3976" fg:w="2"/><text x="29.6431%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i8&gt;::hash (2 samples, 0.01%)</title><rect x="29.3931%" y="149" width="0.0148%" height="15" fill="rgb(244,19,51)" fg:x="3976" fg:w="2"/><text x="29.6431%" y="159.50"></text></g><g><title>core::hash::Hasher::write_i8 (2 samples, 0.01%)</title><rect x="29.3931%" y="133" width="0.0148%" height="15" fill="rgb(224,6,22)" fg:x="3976" fg:w="2"/><text x="29.6431%" y="143.50"></text></g><g><title>core::hash::Hasher::write_u8 (2 samples, 0.01%)</title><rect x="29.3931%" y="117" width="0.0148%" height="15" fill="rgb(224,145,5)" fg:x="3976" fg:w="2"/><text x="29.6431%" y="127.50"></text></g><g><title>rand::rng::Rng::gen (5 samples, 0.04%)</title><rect x="29.4152%" y="293" width="0.0370%" height="15" fill="rgb(234,130,49)" fg:x="3979" fg:w="5"/><text x="29.6652%" y="303.50"></text></g><g><title>rand::distributions::float::&lt;impl rand::distributions::distribution::Distribution&lt;f64&gt; for rand::distributions::Standard&gt;::sample (4 samples, 0.03%)</title><rect x="29.4226%" y="277" width="0.0296%" height="15" fill="rgb(254,6,2)" fg:x="3980" fg:w="4"/><text x="29.6726%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="29.4596%" y="197" width="0.0370%" height="15" fill="rgb(208,96,46)" fg:x="3985" fg:w="5"/><text x="29.7096%" y="207.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="29.4596%" y="181" width="0.0370%" height="15" fill="rgb(239,3,39)" fg:x="3985" fg:w="5"/><text x="29.7096%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (5 samples, 0.04%)</title><rect x="29.4596%" y="165" width="0.0370%" height="15" fill="rgb(233,210,1)" fg:x="3985" fg:w="5"/><text x="29.7096%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (5 samples, 0.04%)</title><rect x="29.4596%" y="149" width="0.0370%" height="15" fill="rgb(244,137,37)" fg:x="3985" fg:w="5"/><text x="29.7096%" y="159.50"></text></g><g><title>&lt;rust_gym::easy_21::Action as core::hash::Hash&gt;::hash (3 samples, 0.02%)</title><rect x="29.5040%" y="165" width="0.0222%" height="15" fill="rgb(240,136,2)" fg:x="3991" fg:w="3"/><text x="29.7540%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (3 samples, 0.02%)</title><rect x="29.5040%" y="149" width="0.0222%" height="15" fill="rgb(239,18,37)" fg:x="3991" fg:w="3"/><text x="29.7540%" y="159.50"></text></g><g><title>core::hash::Hasher::write_isize (3 samples, 0.02%)</title><rect x="29.5040%" y="133" width="0.0222%" height="15" fill="rgb(218,185,22)" fg:x="3991" fg:w="3"/><text x="29.7540%" y="143.50"></text></g><g><title>core::hash::Hasher::write_usize (3 samples, 0.02%)</title><rect x="29.5040%" y="117" width="0.0222%" height="15" fill="rgb(225,218,4)" fg:x="3991" fg:w="3"/><text x="29.7540%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="29.5040%" y="101" width="0.0222%" height="15" fill="rgb(230,182,32)" fg:x="3991" fg:w="3"/><text x="29.7540%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="29.5040%" y="85" width="0.0222%" height="15" fill="rgb(242,56,43)" fg:x="3991" fg:w="3"/><text x="29.7540%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (3 samples, 0.02%)</title><rect x="29.5040%" y="69" width="0.0222%" height="15" fill="rgb(233,99,24)" fg:x="3991" fg:w="3"/><text x="29.7540%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (18 samples, 0.13%)</title><rect x="29.4596%" y="229" width="0.1331%" height="15" fill="rgb(234,209,42)" fg:x="3985" fg:w="18"/><text x="29.7096%" y="239.50"></text></g><g><title>core::hash::BuildHasher::hash_one (18 samples, 0.13%)</title><rect x="29.4596%" y="213" width="0.1331%" height="15" fill="rgb(227,7,12)" fg:x="3985" fg:w="18"/><text x="29.7096%" y="223.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (12 samples, 0.09%)</title><rect x="29.5040%" y="197" width="0.0887%" height="15" fill="rgb(245,203,43)" fg:x="3991" fg:w="12"/><text x="29.7540%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (12 samples, 0.09%)</title><rect x="29.5040%" y="181" width="0.0887%" height="15" fill="rgb(238,205,33)" fg:x="3991" fg:w="12"/><text x="29.7540%" y="191.50"></text></g><g><title>&lt;rust_gym::easy_21::Observation as core::hash::Hash&gt;::hash (9 samples, 0.07%)</title><rect x="29.5261%" y="165" width="0.0665%" height="15" fill="rgb(231,56,7)" fg:x="3994" fg:w="9"/><text x="29.7761%" y="175.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i8&gt;::hash (9 samples, 0.07%)</title><rect x="29.5261%" y="149" width="0.0665%" height="15" fill="rgb(244,186,29)" fg:x="3994" fg:w="9"/><text x="29.7761%" y="159.50"></text></g><g><title>core::hash::Hasher::write_i8 (9 samples, 0.07%)</title><rect x="29.5261%" y="133" width="0.0665%" height="15" fill="rgb(234,111,31)" fg:x="3994" fg:w="9"/><text x="29.7761%" y="143.50"></text></g><g><title>core::hash::Hasher::write_u8 (9 samples, 0.07%)</title><rect x="29.5261%" y="117" width="0.0665%" height="15" fill="rgb(241,149,10)" fg:x="3994" fg:w="9"/><text x="29.7761%" y="127.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (6 samples, 0.04%)</title><rect x="29.5483%" y="101" width="0.0444%" height="15" fill="rgb(249,206,44)" fg:x="3997" fg:w="6"/><text x="29.7983%" y="111.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (6 samples, 0.04%)</title><rect x="29.5483%" y="85" width="0.0444%" height="15" fill="rgb(251,153,30)" fg:x="3997" fg:w="6"/><text x="29.7983%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (6 samples, 0.04%)</title><rect x="29.5483%" y="69" width="0.0444%" height="15" fill="rgb(239,152,38)" fg:x="3997" fg:w="6"/><text x="29.7983%" y="79.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.01%)</title><rect x="29.5779%" y="53" width="0.0148%" height="15" fill="rgb(249,139,47)" fg:x="4001" fg:w="2"/><text x="29.8279%" y="63.50"></text></g><g><title>sarsa::TdAgent::choose_greedy_action (22 samples, 0.16%)</title><rect x="29.4522%" y="293" width="0.1626%" height="15" fill="rgb(244,64,35)" fg:x="3984" fg:w="22"/><text x="29.7022%" y="303.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (21 samples, 0.16%)</title><rect x="29.4596%" y="277" width="0.1552%" height="15" fill="rgb(216,46,15)" fg:x="3985" fg:w="21"/><text x="29.7096%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (21 samples, 0.16%)</title><rect x="29.4596%" y="261" width="0.1552%" height="15" fill="rgb(250,74,19)" fg:x="3985" fg:w="21"/><text x="29.7096%" y="271.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (21 samples, 0.16%)</title><rect x="29.4596%" y="245" width="0.1552%" height="15" fill="rgb(249,42,33)" fg:x="3985" fg:w="21"/><text x="29.7096%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (3 samples, 0.02%)</title><rect x="29.5927%" y="229" width="0.0222%" height="15" fill="rgb(242,149,17)" fg:x="4003" fg:w="3"/><text x="29.8427%" y="239.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (3 samples, 0.02%)</title><rect x="29.5927%" y="213" width="0.0222%" height="15" fill="rgb(244,29,21)" fg:x="4003" fg:w="3"/><text x="29.8427%" y="223.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (3 samples, 0.02%)</title><rect x="29.5927%" y="197" width="0.0222%" height="15" fill="rgb(220,130,37)" fg:x="4003" fg:w="3"/><text x="29.8427%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (3 samples, 0.02%)</title><rect x="29.6148%" y="213" width="0.0222%" height="15" fill="rgb(211,67,2)" fg:x="4006" fg:w="3"/><text x="29.8648%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (3 samples, 0.02%)</title><rect x="29.6148%" y="197" width="0.0222%" height="15" fill="rgb(235,68,52)" fg:x="4006" fg:w="3"/><text x="29.8648%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (3 samples, 0.02%)</title><rect x="29.6148%" y="181" width="0.0222%" height="15" fill="rgb(246,142,3)" fg:x="4006" fg:w="3"/><text x="29.8648%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (4 samples, 0.03%)</title><rect x="29.6370%" y="213" width="0.0296%" height="15" fill="rgb(241,25,7)" fg:x="4009" fg:w="4"/><text x="29.8870%" y="223.50"></text></g><g><title>hashbrown::map::make_hash (10 samples, 0.07%)</title><rect x="29.6148%" y="245" width="0.0739%" height="15" fill="rgb(242,119,39)" fg:x="4006" fg:w="10"/><text x="29.8648%" y="255.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.07%)</title><rect x="29.6148%" y="229" width="0.0739%" height="15" fill="rgb(241,98,45)" fg:x="4006" fg:w="10"/><text x="29.8648%" y="239.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (3 samples, 0.02%)</title><rect x="29.6666%" y="213" width="0.0222%" height="15" fill="rgb(254,28,30)" fg:x="4013" fg:w="3"/><text x="29.9166%" y="223.50"></text></g><g><title>&lt;rust_gym::easy_21::Observation as core::hash::Hash&gt;::hash (3 samples, 0.02%)</title><rect x="29.6666%" y="197" width="0.0222%" height="15" fill="rgb(241,142,54)" fg:x="4013" fg:w="3"/><text x="29.9166%" y="207.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i8&gt;::hash (3 samples, 0.02%)</title><rect x="29.6666%" y="181" width="0.0222%" height="15" fill="rgb(222,85,15)" fg:x="4013" fg:w="3"/><text x="29.9166%" y="191.50"></text></g><g><title>core::hash::Hasher::write_i8 (3 samples, 0.02%)</title><rect x="29.6666%" y="165" width="0.0222%" height="15" fill="rgb(210,85,47)" fg:x="4013" fg:w="3"/><text x="29.9166%" y="175.50"></text></g><g><title>core::hash::Hasher::write_u8 (3 samples, 0.02%)</title><rect x="29.6666%" y="149" width="0.0222%" height="15" fill="rgb(224,206,25)" fg:x="4013" fg:w="3"/><text x="29.9166%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="29.6740%" y="133" width="0.0148%" height="15" fill="rgb(243,201,19)" fg:x="4014" fg:w="2"/><text x="29.9240%" y="143.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="29.6740%" y="117" width="0.0148%" height="15" fill="rgb(236,59,4)" fg:x="4014" fg:w="2"/><text x="29.9240%" y="127.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.01%)</title><rect x="29.6740%" y="101" width="0.0148%" height="15" fill="rgb(254,179,45)" fg:x="4014" fg:w="2"/><text x="29.9240%" y="111.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.01%)</title><rect x="29.6740%" y="85" width="0.0148%" height="15" fill="rgb(226,14,10)" fg:x="4014" fg:w="2"/><text x="29.9240%" y="95.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (2 samples, 0.01%)</title><rect x="29.6962%" y="197" width="0.0148%" height="15" fill="rgb(244,27,41)" fg:x="4017" fg:w="2"/><text x="29.9462%" y="207.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (2 samples, 0.01%)</title><rect x="29.6962%" y="181" width="0.0148%" height="15" fill="rgb(235,35,32)" fg:x="4017" fg:w="2"/><text x="29.9462%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.01%)</title><rect x="29.7183%" y="197" width="0.0148%" height="15" fill="rgb(218,68,31)" fg:x="4020" fg:w="2"/><text x="29.9683%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.01%)</title><rect x="29.7183%" y="181" width="0.0148%" height="15" fill="rgb(207,120,37)" fg:x="4020" fg:w="2"/><text x="29.9683%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.01%)</title><rect x="29.7183%" y="165" width="0.0148%" height="15" fill="rgb(227,98,0)" fg:x="4020" fg:w="2"/><text x="29.9683%" y="175.50"></text></g><g><title>sarsa::TdAgent::epsilon_greedy_policy (47 samples, 0.35%)</title><rect x="29.4079%" y="309" width="0.3475%" height="15" fill="rgb(207,7,3)" fg:x="3978" fg:w="47"/><text x="29.6579%" y="319.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (19 samples, 0.14%)</title><rect x="29.6148%" y="293" width="0.1405%" height="15" fill="rgb(206,98,19)" fg:x="4006" fg:w="19"/><text x="29.8648%" y="303.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (19 samples, 0.14%)</title><rect x="29.6148%" y="277" width="0.1405%" height="15" fill="rgb(217,5,26)" fg:x="4006" fg:w="19"/><text x="29.8648%" y="287.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (19 samples, 0.14%)</title><rect x="29.6148%" y="261" width="0.1405%" height="15" fill="rgb(235,190,38)" fg:x="4006" fg:w="19"/><text x="29.8648%" y="271.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get (9 samples, 0.07%)</title><rect x="29.6888%" y="245" width="0.0665%" height="15" fill="rgb(247,86,24)" fg:x="4016" fg:w="9"/><text x="29.9388%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (9 samples, 0.07%)</title><rect x="29.6888%" y="229" width="0.0665%" height="15" fill="rgb(205,101,16)" fg:x="4016" fg:w="9"/><text x="29.9388%" y="239.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (9 samples, 0.07%)</title><rect x="29.6888%" y="213" width="0.0665%" height="15" fill="rgb(246,168,33)" fg:x="4016" fg:w="9"/><text x="29.9388%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (3 samples, 0.02%)</title><rect x="29.7331%" y="197" width="0.0222%" height="15" fill="rgb(231,114,1)" fg:x="4022" fg:w="3"/><text x="29.9831%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (3 samples, 0.02%)</title><rect x="29.7331%" y="181" width="0.0222%" height="15" fill="rgb(207,184,53)" fg:x="4022" fg:w="3"/><text x="29.9831%" y="191.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::write (10 samples, 0.07%)</title><rect x="32.2984%" y="213" width="0.0739%" height="15" fill="rgb(224,95,51)" fg:x="4369" fg:w="10"/><text x="32.5484%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::write (10 samples, 0.07%)</title><rect x="32.2984%" y="197" width="0.0739%" height="15" fill="rgb(212,188,45)" fg:x="4369" fg:w="10"/><text x="32.5484%" y="207.50"></text></g><g><title>core::ptr::write (10 samples, 0.07%)</title><rect x="32.2984%" y="181" width="0.0739%" height="15" fill="rgb(223,154,38)" fg:x="4369" fg:w="10"/><text x="32.5484%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::bucket (28 samples, 0.21%)</title><rect x="32.3723%" y="213" width="0.2070%" height="15" fill="rgb(251,22,52)" fg:x="4379" fg:w="28"/><text x="32.6223%" y="223.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (28 samples, 0.21%)</title><rect x="32.3723%" y="197" width="0.2070%" height="15" fill="rgb(229,209,22)" fg:x="4379" fg:w="28"/><text x="32.6223%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (28 samples, 0.21%)</title><rect x="32.3723%" y="181" width="0.2070%" height="15" fill="rgb(234,138,34)" fg:x="4379" fg:w="28"/><text x="32.6223%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (28 samples, 0.21%)</title><rect x="32.3723%" y="165" width="0.2070%" height="15" fill="rgb(212,95,11)" fg:x="4379" fg:w="28"/><text x="32.6223%" y="175.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::probe_seq (7 samples, 0.05%)</title><rect x="33.6734%" y="181" width="0.0517%" height="15" fill="rgb(240,179,47)" fg:x="4555" fg:w="7"/><text x="33.9234%" y="191.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (8 samples, 0.06%)</title><rect x="33.7251%" y="181" width="0.0591%" height="15" fill="rgb(240,163,11)" fg:x="4562" fg:w="8"/><text x="33.9751%" y="191.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (166 samples, 1.23%)</title><rect x="32.5793%" y="197" width="1.2272%" height="15" fill="rgb(236,37,12)" fg:x="4407" fg:w="166"/><text x="32.8293%" y="207.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (3 samples, 0.02%)</title><rect x="33.7843%" y="181" width="0.0222%" height="15" fill="rgb(232,164,16)" fg:x="4570" fg:w="3"/><text x="34.0343%" y="191.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (3 samples, 0.02%)</title><rect x="33.7843%" y="165" width="0.0222%" height="15" fill="rgb(244,205,15)" fg:x="4570" fg:w="3"/><text x="34.0343%" y="175.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.02%)</title><rect x="33.7843%" y="149" width="0.0222%" height="15" fill="rgb(223,117,47)" fg:x="4570" fg:w="3"/><text x="34.0343%" y="159.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (410 samples, 3.03%)</title><rect x="31.8031%" y="277" width="3.0310%" height="15" fill="rgb(244,107,35)" fg:x="4302" fg:w="410"/><text x="32.0531%" y="287.50">std..</text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (410 samples, 3.03%)</title><rect x="31.8031%" y="261" width="3.0310%" height="15" fill="rgb(205,140,8)" fg:x="4302" fg:w="410"/><text x="32.0531%" y="271.50">std..</text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (410 samples, 3.03%)</title><rect x="31.8031%" y="245" width="3.0310%" height="15" fill="rgb(228,84,46)" fg:x="4302" fg:w="410"/><text x="32.0531%" y="255.50">has..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (395 samples, 2.92%)</title><rect x="31.9139%" y="229" width="2.9201%" height="15" fill="rgb(254,188,9)" fg:x="4317" fg:w="395"/><text x="32.1639%" y="239.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (305 samples, 2.25%)</title><rect x="32.5793%" y="213" width="2.2547%" height="15" fill="rgb(206,112,54)" fg:x="4407" fg:w="305"/><text x="32.8293%" y="223.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (139 samples, 1.03%)</title><rect x="33.8065%" y="197" width="1.0276%" height="15" fill="rgb(216,84,49)" fg:x="4573" fg:w="139"/><text x="34.0565%" y="207.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (139 samples, 1.03%)</title><rect x="33.8065%" y="181" width="1.0276%" height="15" fill="rgb(214,194,35)" fg:x="4573" fg:w="139"/><text x="34.0565%" y="191.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (33 samples, 0.24%)</title><rect x="35.2037%" y="245" width="0.2440%" height="15" fill="rgb(249,28,3)" fg:x="4762" fg:w="33"/><text x="35.4537%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (33 samples, 0.24%)</title><rect x="35.2037%" y="229" width="0.2440%" height="15" fill="rgb(222,56,52)" fg:x="4762" fg:w="33"/><text x="35.4537%" y="239.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (35 samples, 0.26%)</title><rect x="37.1849%" y="149" width="0.2587%" height="15" fill="rgb(245,217,50)" fg:x="5030" fg:w="35"/><text x="37.4349%" y="159.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (115 samples, 0.85%)</title><rect x="36.8966%" y="165" width="0.8502%" height="15" fill="rgb(213,201,24)" fg:x="4991" fg:w="115"/><text x="37.1466%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (41 samples, 0.30%)</title><rect x="37.4436%" y="149" width="0.3031%" height="15" fill="rgb(248,116,28)" fg:x="5065" fg:w="41"/><text x="37.6936%" y="159.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (161 samples, 1.19%)</title><rect x="38.9443%" y="149" width="1.1902%" height="15" fill="rgb(219,72,43)" fg:x="5268" fg:w="161"/><text x="39.1943%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (638 samples, 4.72%)</title><rect x="36.0908%" y="213" width="4.7165%" height="15" fill="rgb(209,138,14)" fg:x="4882" fg:w="638"/><text x="36.3408%" y="223.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (638 samples, 4.72%)</title><rect x="36.0908%" y="197" width="4.7165%" height="15" fill="rgb(222,18,33)" fg:x="4882" fg:w="638"/><text x="36.3408%" y="207.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (638 samples, 4.72%)</title><rect x="36.0908%" y="181" width="4.7165%" height="15" fill="rgb(213,199,7)" fg:x="4882" fg:w="638"/><text x="36.3408%" y="191.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (414 samples, 3.06%)</title><rect x="37.7467%" y="165" width="3.0605%" height="15" fill="rgb(250,110,10)" fg:x="5106" fg:w="414"/><text x="37.9967%" y="175.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (91 samples, 0.67%)</title><rect x="40.1345%" y="149" width="0.6727%" height="15" fill="rgb(248,123,6)" fg:x="5429" fg:w="91"/><text x="40.3845%" y="159.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (93 samples, 0.69%)</title><rect x="40.8073%" y="213" width="0.6875%" height="15" fill="rgb(206,91,31)" fg:x="5520" fg:w="93"/><text x="41.0573%" y="223.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (49 samples, 0.36%)</title><rect x="41.1325%" y="197" width="0.3622%" height="15" fill="rgb(211,154,13)" fg:x="5564" fg:w="49"/><text x="41.3825%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (49 samples, 0.36%)</title><rect x="41.1325%" y="181" width="0.3622%" height="15" fill="rgb(225,148,7)" fg:x="5564" fg:w="49"/><text x="41.3825%" y="191.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (49 samples, 0.36%)</title><rect x="41.1325%" y="165" width="0.3622%" height="15" fill="rgb(220,160,43)" fg:x="5564" fg:w="49"/><text x="41.3825%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (60 samples, 0.44%)</title><rect x="43.8013%" y="53" width="0.4436%" height="15" fill="rgb(213,52,39)" fg:x="5925" fg:w="60"/><text x="44.0513%" y="63.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (155 samples, 1.15%)</title><rect x="43.4464%" y="69" width="1.1459%" height="15" fill="rgb(243,137,7)" fg:x="5877" fg:w="155"/><text x="43.6964%" y="79.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (47 samples, 0.35%)</title><rect x="44.2448%" y="53" width="0.3475%" height="15" fill="rgb(230,79,13)" fg:x="5985" fg:w="47"/><text x="44.4948%" y="63.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (669 samples, 4.95%)</title><rect x="41.5244%" y="117" width="4.9457%" height="15" fill="rgb(247,105,23)" fg:x="5617" fg:w="669"/><text x="41.7744%" y="127.50">&lt;std::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (667 samples, 4.93%)</title><rect x="41.5391%" y="101" width="4.9309%" height="15" fill="rgb(223,179,41)" fg:x="5619" fg:w="667"/><text x="41.7891%" y="111.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (667 samples, 4.93%)</title><rect x="41.5391%" y="85" width="4.9309%" height="15" fill="rgb(218,9,34)" fg:x="5619" fg:w="667"/><text x="41.7891%" y="95.50">&lt;core:..</text></g><g><title>core::hash::sip::u8to64_le (254 samples, 1.88%)</title><rect x="44.5923%" y="69" width="1.8777%" height="15" fill="rgb(222,106,8)" fg:x="6032" fg:w="254"/><text x="44.8423%" y="79.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.04%)</title><rect x="46.4257%" y="53" width="0.0444%" height="15" fill="rgb(211,220,0)" fg:x="6280" fg:w="6"/><text x="46.6757%" y="63.50"></text></g><g><title>&lt;rust_gym::easy_21::Action as core::hash::Hash&gt;::hash (713 samples, 5.27%)</title><rect x="41.4948%" y="181" width="5.2709%" height="15" fill="rgb(229,52,16)" fg:x="5613" fg:w="713"/><text x="41.7448%" y="191.50">&lt;rust_..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (709 samples, 5.24%)</title><rect x="41.5244%" y="165" width="5.2414%" height="15" fill="rgb(212,155,18)" fg:x="5617" fg:w="709"/><text x="41.7744%" y="175.50">core::..</text></g><g><title>core::hash::Hasher::write_isize (709 samples, 5.24%)</title><rect x="41.5244%" y="149" width="5.2414%" height="15" fill="rgb(242,21,14)" fg:x="5617" fg:w="709"/><text x="41.7744%" y="159.50">core::..</text></g><g><title>core::hash::Hasher::write_usize (709 samples, 5.24%)</title><rect x="41.5244%" y="133" width="5.2414%" height="15" fill="rgb(222,19,48)" fg:x="5617" fg:w="709"/><text x="41.7744%" y="143.50">core::..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (40 samples, 0.30%)</title><rect x="46.4700%" y="117" width="0.2957%" height="15" fill="rgb(232,45,27)" fg:x="6286" fg:w="40"/><text x="46.7200%" y="127.50"></text></g><g><title>core::cmp::min (32 samples, 0.24%)</title><rect x="49.3458%" y="69" width="0.2366%" height="15" fill="rgb(249,103,42)" fg:x="6675" fg:w="32"/><text x="49.5958%" y="79.50"></text></g><g><title>core::cmp::Ord::min (32 samples, 0.24%)</title><rect x="49.3458%" y="53" width="0.2366%" height="15" fill="rgb(246,81,33)" fg:x="6675" fg:w="32"/><text x="49.5958%" y="63.50"></text></g><g><title>hashbrown::map::make_insert_hash (2,216 samples, 16.38%)</title><rect x="35.4476%" y="245" width="16.3821%" height="15" fill="rgb(252,33,42)" fg:x="4795" fg:w="2216"/><text x="35.6976%" y="255.50">hashbrown::map::make_inse..</text></g><g><title>core::hash::BuildHasher::hash_one (2,161 samples, 15.98%)</title><rect x="35.8542%" y="229" width="15.9755%" height="15" fill="rgb(209,212,41)" fg:x="4850" fg:w="2161"/><text x="36.1042%" y="239.50">core::hash::BuildHasher::..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,398 samples, 10.33%)</title><rect x="41.4948%" y="213" width="10.3349%" height="15" fill="rgb(207,154,6)" fg:x="5613" fg:w="1398"/><text x="41.7448%" y="223.50">core::hash::imp..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (1,398 samples, 10.33%)</title><rect x="41.4948%" y="197" width="10.3349%" height="15" fill="rgb(223,64,47)" fg:x="5613" fg:w="1398"/><text x="41.7448%" y="207.50">core::hash::imp..</text></g><g><title>&lt;rust_gym::easy_21::Observation as core::hash::Hash&gt;::hash (685 samples, 5.06%)</title><rect x="46.7657%" y="181" width="5.0639%" height="15" fill="rgb(211,161,38)" fg:x="6326" fg:w="685"/><text x="47.0157%" y="191.50">&lt;rust_..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i8&gt;::hash (685 samples, 5.06%)</title><rect x="46.7657%" y="165" width="5.0639%" height="15" fill="rgb(219,138,40)" fg:x="6326" fg:w="685"/><text x="47.0157%" y="175.50">core::..</text></g><g><title>core::hash::Hasher::write_i8 (684 samples, 5.06%)</title><rect x="46.7731%" y="149" width="5.0566%" height="15" fill="rgb(241,228,46)" fg:x="6327" fg:w="684"/><text x="47.0231%" y="159.50">core::..</text></g><g><title>core::hash::Hasher::write_u8 (684 samples, 5.06%)</title><rect x="46.7731%" y="133" width="5.0566%" height="15" fill="rgb(223,209,38)" fg:x="6327" fg:w="684"/><text x="47.0231%" y="143.50">core::..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (570 samples, 4.21%)</title><rect x="47.6159%" y="117" width="4.2138%" height="15" fill="rgb(236,164,45)" fg:x="6441" fg:w="570"/><text x="47.8659%" y="127.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (570 samples, 4.21%)</title><rect x="47.6159%" y="101" width="4.2138%" height="15" fill="rgb(231,15,5)" fg:x="6441" fg:w="570"/><text x="47.8659%" y="111.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (570 samples, 4.21%)</title><rect x="47.6159%" y="85" width="4.2138%" height="15" fill="rgb(252,35,15)" fg:x="6441" fg:w="570"/><text x="47.8659%" y="95.50">&lt;core..</text></g><g><title>core::hash::sip::u8to64_le (304 samples, 2.25%)</title><rect x="49.5823%" y="69" width="2.2474%" height="15" fill="rgb(248,181,18)" fg:x="6707" fg:w="304"/><text x="49.8323%" y="79.50">c..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (31 samples, 0.23%)</title><rect x="51.9406%" y="213" width="0.2292%" height="15" fill="rgb(233,39,42)" fg:x="7026" fg:w="31"/><text x="52.1906%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (30 samples, 0.22%)</title><rect x="51.9480%" y="197" width="0.2218%" height="15" fill="rgb(238,110,33)" fg:x="7027" fg:w="30"/><text x="52.1980%" y="207.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (12 samples, 0.09%)</title><rect x="52.1697%" y="213" width="0.0887%" height="15" fill="rgb(233,195,10)" fg:x="7057" fg:w="12"/><text x="52.4197%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (7 samples, 0.05%)</title><rect x="52.2584%" y="197" width="0.0517%" height="15" fill="rgb(254,105,3)" fg:x="7069" fg:w="7"/><text x="52.5084%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (7 samples, 0.05%)</title><rect x="52.2584%" y="181" width="0.0517%" height="15" fill="rgb(221,225,9)" fg:x="7069" fg:w="7"/><text x="52.5084%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (7 samples, 0.05%)</title><rect x="52.2584%" y="165" width="0.0517%" height="15" fill="rgb(224,227,45)" fg:x="7069" fg:w="7"/><text x="52.5084%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (7 samples, 0.05%)</title><rect x="52.2584%" y="149" width="0.0517%" height="15" fill="rgb(229,198,43)" fg:x="7069" fg:w="7"/><text x="52.5084%" y="159.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (49 samples, 0.36%)</title><rect x="52.2584%" y="213" width="0.3622%" height="15" fill="rgb(206,209,35)" fg:x="7069" fg:w="49"/><text x="52.5084%" y="223.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (42 samples, 0.31%)</title><rect x="52.3102%" y="197" width="0.3105%" height="15" fill="rgb(245,195,53)" fg:x="7076" fg:w="42"/><text x="52.5602%" y="207.50"></text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (42 samples, 0.31%)</title><rect x="52.3102%" y="181" width="0.3105%" height="15" fill="rgb(240,92,26)" fg:x="7076" fg:w="42"/><text x="52.5602%" y="191.50"></text></g><g><title>&lt;rust_gym::easy_21::Observation as core::cmp::PartialEq&gt;::eq (25 samples, 0.18%)</title><rect x="52.4359%" y="165" width="0.1848%" height="15" fill="rgb(207,40,23)" fg:x="7093" fg:w="25"/><text x="52.6859%" y="175.50"></text></g><g><title>hashbrown::raw::h2 (113 samples, 0.84%)</title><rect x="52.6207%" y="213" width="0.8354%" height="15" fill="rgb(223,111,35)" fg:x="7118" fg:w="113"/><text x="52.8707%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (15 samples, 0.11%)</title><rect x="53.4561%" y="213" width="0.1109%" height="15" fill="rgb(229,147,28)" fg:x="7231" fg:w="15"/><text x="53.7061%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (15 samples, 0.11%)</title><rect x="53.4561%" y="197" width="0.1109%" height="15" fill="rgb(211,29,28)" fg:x="7231" fg:w="15"/><text x="53.7061%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (15 samples, 0.11%)</title><rect x="53.4561%" y="181" width="0.1109%" height="15" fill="rgb(228,72,33)" fg:x="7231" fg:w="15"/><text x="53.7061%" y="191.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (47 samples, 0.35%)</title><rect x="53.5669%" y="213" width="0.3475%" height="15" fill="rgb(205,214,31)" fg:x="7246" fg:w="47"/><text x="53.8169%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (47 samples, 0.35%)</title><rect x="53.5669%" y="197" width="0.3475%" height="15" fill="rgb(224,111,15)" fg:x="7246" fg:w="47"/><text x="53.8169%" y="207.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (3,306 samples, 24.44%)</title><rect x="29.7553%" y="309" width="24.4400%" height="15" fill="rgb(253,21,26)" fg:x="4025" fg:w="3306"/><text x="30.0053%" y="319.50">std::collections::hash::map::Entry&lt;K,V&gt;..</text></g><g><title>sarsa::TdAgent::train::{{closure}} (3,306 samples, 24.44%)</title><rect x="29.7553%" y="293" width="24.4400%" height="15" fill="rgb(245,139,43)" fg:x="4025" fg:w="3306"/><text x="30.0053%" y="303.50">sarsa::TdAgent::train::{{closure}}</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (2,619 samples, 19.36%)</title><rect x="34.8340%" y="277" width="19.3613%" height="15" fill="rgb(252,170,7)" fg:x="4712" fg:w="2619"/><text x="35.0840%" y="287.50">std::collections::hash::map::H..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (2,591 samples, 19.15%)</title><rect x="35.0410%" y="261" width="19.1543%" height="15" fill="rgb(231,118,14)" fg:x="4740" fg:w="2591"/><text x="35.2910%" y="271.50">hashbrown::rustc_entry::&lt;impl ..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (320 samples, 2.37%)</title><rect x="51.8297%" y="245" width="2.3656%" height="15" fill="rgb(238,83,0)" fg:x="7011" fg:w="320"/><text x="52.0797%" y="255.50">ha..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (311 samples, 2.30%)</title><rect x="51.8962%" y="229" width="2.2991%" height="15" fill="rgb(221,39,39)" fg:x="7020" fg:w="311"/><text x="52.1462%" y="239.50">h..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (38 samples, 0.28%)</title><rect x="53.9144%" y="213" width="0.2809%" height="15" fill="rgb(222,119,46)" fg:x="7293" fg:w="38"/><text x="54.1644%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (38 samples, 0.28%)</title><rect x="53.9144%" y="197" width="0.2809%" height="15" fill="rgb(222,165,49)" fg:x="7293" fg:w="38"/><text x="54.1644%" y="207.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (38 samples, 0.28%)</title><rect x="53.9144%" y="181" width="0.2809%" height="15" fill="rgb(219,113,52)" fg:x="7293" fg:w="38"/><text x="54.1644%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (35 samples, 0.26%)</title><rect x="55.9326%" y="181" width="0.2587%" height="15" fill="rgb(214,7,15)" fg:x="7566" fg:w="35"/><text x="56.1826%" y="191.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (99 samples, 0.73%)</title><rect x="55.6738%" y="197" width="0.7319%" height="15" fill="rgb(235,32,4)" fg:x="7531" fg:w="99"/><text x="55.9238%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (29 samples, 0.21%)</title><rect x="56.1913%" y="181" width="0.2144%" height="15" fill="rgb(238,90,54)" fg:x="7601" fg:w="29"/><text x="56.4413%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (176 samples, 1.30%)</title><rect x="57.4998%" y="181" width="1.3011%" height="15" fill="rgb(213,208,19)" fg:x="7778" fg:w="176"/><text x="57.7498%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (619 samples, 4.58%)</title><rect x="54.7350%" y="245" width="4.5760%" height="15" fill="rgb(233,156,4)" fg:x="7404" fg:w="619"/><text x="54.9850%" y="255.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (619 samples, 4.58%)</title><rect x="54.7350%" y="229" width="4.5760%" height="15" fill="rgb(207,194,5)" fg:x="7404" fg:w="619"/><text x="54.9850%" y="239.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (619 samples, 4.58%)</title><rect x="54.7350%" y="213" width="4.5760%" height="15" fill="rgb(206,111,30)" fg:x="7404" fg:w="619"/><text x="54.9850%" y="223.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (393 samples, 2.91%)</title><rect x="56.4057%" y="197" width="2.9053%" height="15" fill="rgb(243,70,54)" fg:x="7630" fg:w="393"/><text x="56.6557%" y="207.50">&lt;c..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (69 samples, 0.51%)</title><rect x="58.8009%" y="181" width="0.5101%" height="15" fill="rgb(242,28,8)" fg:x="7954" fg:w="69"/><text x="59.0509%" y="191.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (110 samples, 0.81%)</title><rect x="59.3110%" y="245" width="0.8132%" height="15" fill="rgb(219,106,18)" fg:x="8023" fg:w="110"/><text x="59.5610%" y="255.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (45 samples, 0.33%)</title><rect x="59.7915%" y="229" width="0.3327%" height="15" fill="rgb(244,222,10)" fg:x="8088" fg:w="45"/><text x="60.0415%" y="239.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (45 samples, 0.33%)</title><rect x="59.7915%" y="213" width="0.3327%" height="15" fill="rgb(236,179,52)" fg:x="8088" fg:w="45"/><text x="60.0415%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (45 samples, 0.33%)</title><rect x="59.7915%" y="197" width="0.3327%" height="15" fill="rgb(213,23,39)" fg:x="8088" fg:w="45"/><text x="60.0415%" y="207.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (83 samples, 0.61%)</title><rect x="62.3124%" y="85" width="0.6136%" height="15" fill="rgb(238,48,10)" fg:x="8429" fg:w="83"/><text x="62.5624%" y="95.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (185 samples, 1.37%)</title><rect x="61.9280%" y="101" width="1.3676%" height="15" fill="rgb(251,196,23)" fg:x="8377" fg:w="185"/><text x="62.1780%" y="111.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (50 samples, 0.37%)</title><rect x="62.9260%" y="85" width="0.3696%" height="15" fill="rgb(250,152,24)" fg:x="8512" fg:w="50"/><text x="63.1760%" y="95.50"></text></g><g><title>core::cmp::min (5 samples, 0.04%)</title><rect x="63.2956%" y="101" width="0.0370%" height="15" fill="rgb(209,150,17)" fg:x="8562" fg:w="5"/><text x="63.5456%" y="111.50"></text></g><g><title>core::cmp::Ord::min (5 samples, 0.04%)</title><rect x="63.2956%" y="85" width="0.0370%" height="15" fill="rgb(234,202,34)" fg:x="8562" fg:w="5"/><text x="63.5456%" y="95.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (744 samples, 5.50%)</title><rect x="60.1612%" y="149" width="5.5001%" height="15" fill="rgb(253,148,53)" fg:x="8138" fg:w="744"/><text x="60.4112%" y="159.50">&lt;std::c..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (734 samples, 5.43%)</title><rect x="60.2351%" y="133" width="5.4262%" height="15" fill="rgb(218,129,16)" fg:x="8148" fg:w="734"/><text x="60.4851%" y="143.50">&lt;core::..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (734 samples, 5.43%)</title><rect x="60.2351%" y="117" width="5.4262%" height="15" fill="rgb(216,85,19)" fg:x="8148" fg:w="734"/><text x="60.4851%" y="127.50">&lt;core::..</text></g><g><title>core::hash::sip::u8to64_le (315 samples, 2.33%)</title><rect x="63.3326%" y="101" width="2.3287%" height="15" fill="rgb(235,228,7)" fg:x="8567" fg:w="315"/><text x="63.5826%" y="111.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (10 samples, 0.07%)</title><rect x="65.5873%" y="85" width="0.0739%" height="15" fill="rgb(245,175,0)" fg:x="8872" fg:w="10"/><text x="65.8373%" y="95.50"></text></g><g><title>&lt;rust_gym::easy_21::Action as core::hash::Hash&gt;::hash (782 samples, 5.78%)</title><rect x="60.1316%" y="213" width="5.7810%" height="15" fill="rgb(208,168,36)" fg:x="8134" fg:w="782"/><text x="60.3816%" y="223.50">&lt;rust_g..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (778 samples, 5.75%)</title><rect x="60.1612%" y="197" width="5.7515%" height="15" fill="rgb(246,171,24)" fg:x="8138" fg:w="778"/><text x="60.4112%" y="207.50">core::h..</text></g><g><title>core::hash::Hasher::write_isize (778 samples, 5.75%)</title><rect x="60.1612%" y="181" width="5.7515%" height="15" fill="rgb(215,142,24)" fg:x="8138" fg:w="778"/><text x="60.4112%" y="191.50">core::h..</text></g><g><title>core::hash::Hasher::write_usize (778 samples, 5.75%)</title><rect x="60.1612%" y="165" width="5.7515%" height="15" fill="rgb(250,187,7)" fg:x="8138" fg:w="778"/><text x="60.4112%" y="175.50">core::h..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (34 samples, 0.25%)</title><rect x="65.6613%" y="149" width="0.2513%" height="15" fill="rgb(228,66,33)" fg:x="8882" fg:w="34"/><text x="65.9113%" y="159.50"></text></g><g><title>core::cmp::min (22 samples, 0.16%)</title><rect x="68.9510%" y="101" width="0.1626%" height="15" fill="rgb(234,215,21)" fg:x="9327" fg:w="22"/><text x="69.2010%" y="111.50"></text></g><g><title>core::cmp::Ord::min (22 samples, 0.16%)</title><rect x="68.9510%" y="85" width="0.1626%" height="15" fill="rgb(222,191,20)" fg:x="9327" fg:w="22"/><text x="69.2010%" y="95.50"></text></g><g><title>hashbrown::map::make_insert_hash (2,255 samples, 16.67%)</title><rect x="54.6610%" y="277" width="16.6704%" height="15" fill="rgb(245,79,54)" fg:x="7394" fg:w="2255"/><text x="54.9110%" y="287.50">hashbrown::map::make_inser..</text></g><g><title>core::hash::BuildHasher::hash_one (2,248 samples, 16.62%)</title><rect x="54.7128%" y="261" width="16.6186%" height="15" fill="rgb(240,10,37)" fg:x="7401" fg:w="2248"/><text x="54.9628%" y="271.50">core::hash::BuildHasher::h..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,516 samples, 11.21%)</title><rect x="60.1242%" y="245" width="11.2072%" height="15" fill="rgb(214,192,32)" fg:x="8133" fg:w="1516"/><text x="60.3742%" y="255.50">core::hash::impl..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (1,515 samples, 11.20%)</title><rect x="60.1316%" y="229" width="11.1998%" height="15" fill="rgb(209,36,54)" fg:x="8134" fg:w="1515"/><text x="60.3816%" y="239.50">core::hash::impl..</text></g><g><title>&lt;rust_gym::easy_21::Observation as core::hash::Hash&gt;::hash (733 samples, 5.42%)</title><rect x="65.9126%" y="213" width="5.4188%" height="15" fill="rgb(220,10,11)" fg:x="8916" fg:w="733"/><text x="66.1626%" y="223.50">&lt;rust_g..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i8&gt;::hash (733 samples, 5.42%)</title><rect x="65.9126%" y="197" width="5.4188%" height="15" fill="rgb(221,106,17)" fg:x="8916" fg:w="733"/><text x="66.1626%" y="207.50">core::h..</text></g><g><title>core::hash::Hasher::write_i8 (727 samples, 5.37%)</title><rect x="65.9570%" y="181" width="5.3744%" height="15" fill="rgb(251,142,44)" fg:x="8922" fg:w="727"/><text x="66.2070%" y="191.50">core::h..</text></g><g><title>core::hash::Hasher::write_u8 (727 samples, 5.37%)</title><rect x="65.9570%" y="165" width="5.3744%" height="15" fill="rgb(238,13,15)" fg:x="8922" fg:w="727"/><text x="66.2070%" y="175.50">core::h..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (611 samples, 4.52%)</title><rect x="66.8145%" y="149" width="4.5169%" height="15" fill="rgb(208,107,27)" fg:x="9038" fg:w="611"/><text x="67.0645%" y="159.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (611 samples, 4.52%)</title><rect x="66.8145%" y="133" width="4.5169%" height="15" fill="rgb(205,136,37)" fg:x="9038" fg:w="611"/><text x="67.0645%" y="143.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (611 samples, 4.52%)</title><rect x="66.8145%" y="117" width="4.5169%" height="15" fill="rgb(250,205,27)" fg:x="9038" fg:w="611"/><text x="67.0645%" y="127.50">&lt;core..</text></g><g><title>core::hash::sip::u8to64_le (300 samples, 2.22%)</title><rect x="69.1136%" y="101" width="2.2178%" height="15" fill="rgb(210,80,43)" fg:x="9349" fg:w="300"/><text x="69.3636%" y="111.50">c..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (84 samples, 0.62%)</title><rect x="71.6123%" y="245" width="0.6210%" height="15" fill="rgb(247,160,36)" fg:x="9687" fg:w="84"/><text x="71.8623%" y="255.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (71 samples, 0.52%)</title><rect x="71.7084%" y="229" width="0.5249%" height="15" fill="rgb(234,13,49)" fg:x="9700" fg:w="71"/><text x="71.9584%" y="239.50"></text></g><g><title>hashbrown::raw::ProbeSeq::move_next (5 samples, 0.04%)</title><rect x="72.2333%" y="245" width="0.0370%" height="15" fill="rgb(234,122,0)" fg:x="9771" fg:w="5"/><text x="72.4833%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (73 samples, 0.54%)</title><rect x="72.2703%" y="229" width="0.5397%" height="15" fill="rgb(207,146,38)" fg:x="9776" fg:w="73"/><text x="72.5203%" y="239.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (73 samples, 0.54%)</title><rect x="72.2703%" y="213" width="0.5397%" height="15" fill="rgb(207,177,25)" fg:x="9776" fg:w="73"/><text x="72.5203%" y="223.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (73 samples, 0.54%)</title><rect x="72.2703%" y="197" width="0.5397%" height="15" fill="rgb(211,178,42)" fg:x="9776" fg:w="73"/><text x="72.5203%" y="207.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (73 samples, 0.54%)</title><rect x="72.2703%" y="181" width="0.5397%" height="15" fill="rgb(230,69,54)" fg:x="9776" fg:w="73"/><text x="72.5203%" y="191.50"></text></g><g><title>&lt;rust_gym::easy_21::Action as core::cmp::PartialEq&gt;::eq (2 samples, 0.01%)</title><rect x="73.7932%" y="197" width="0.0148%" height="15" fill="rgb(214,135,41)" fg:x="9982" fg:w="2"/><text x="74.0432%" y="207.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (403 samples, 2.98%)</title><rect x="72.2703%" y="245" width="2.9792%" height="15" fill="rgb(237,67,25)" fg:x="9776" fg:w="403"/><text x="72.5203%" y="255.50">has..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (330 samples, 2.44%)</title><rect x="72.8099%" y="229" width="2.4396%" height="15" fill="rgb(222,189,50)" fg:x="9849" fg:w="330"/><text x="73.0599%" y="239.50">ha..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (330 samples, 2.44%)</title><rect x="72.8099%" y="213" width="2.4396%" height="15" fill="rgb(245,148,34)" fg:x="9849" fg:w="330"/><text x="73.0599%" y="223.50">co..</text></g><g><title>&lt;rust_gym::easy_21::Observation as core::cmp::PartialEq&gt;::eq (195 samples, 1.44%)</title><rect x="73.8079%" y="197" width="1.4416%" height="15" fill="rgb(222,29,6)" fg:x="9984" fg:w="195"/><text x="74.0579%" y="207.50"></text></g><g><title>hashbrown::raw::h2 (128 samples, 0.95%)</title><rect x="75.2495%" y="245" width="0.9463%" height="15" fill="rgb(221,189,43)" fg:x="10179" fg:w="128"/><text x="75.4995%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (11 samples, 0.08%)</title><rect x="76.1958%" y="245" width="0.0813%" height="15" fill="rgb(207,36,27)" fg:x="10307" fg:w="11"/><text x="76.4458%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (11 samples, 0.08%)</title><rect x="76.1958%" y="229" width="0.0813%" height="15" fill="rgb(217,90,24)" fg:x="10307" fg:w="11"/><text x="76.4458%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (11 samples, 0.08%)</title><rect x="76.1958%" y="213" width="0.0813%" height="15" fill="rgb(224,66,35)" fg:x="10307" fg:w="11"/><text x="76.4458%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (67 samples, 0.50%)</title><rect x="76.2771%" y="245" width="0.4953%" height="15" fill="rgb(221,13,50)" fg:x="10318" fg:w="67"/><text x="76.5271%" y="255.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (67 samples, 0.50%)</title><rect x="76.2771%" y="229" width="0.4953%" height="15" fill="rgb(236,68,49)" fg:x="10318" fg:w="67"/><text x="76.5271%" y="239.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (3,071 samples, 22.70%)</title><rect x="54.1953%" y="309" width="22.7027%" height="15" fill="rgb(229,146,28)" fg:x="7331" fg:w="3071"/><text x="54.4453%" y="319.50">std::collections::hash::map::HashMap..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3,008 samples, 22.24%)</title><rect x="54.6610%" y="293" width="22.2370%" height="15" fill="rgb(225,31,38)" fg:x="7394" fg:w="3008"/><text x="54.9110%" y="303.50">hashbrown::rustc_entry::&lt;impl hashb..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (753 samples, 5.57%)</title><rect x="71.3314%" y="277" width="5.5666%" height="15" fill="rgb(250,208,3)" fg:x="9649" fg:w="753"/><text x="71.5814%" y="287.50">hashbro..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (717 samples, 5.30%)</title><rect x="71.5975%" y="261" width="5.3005%" height="15" fill="rgb(246,54,23)" fg:x="9685" fg:w="717"/><text x="71.8475%" y="271.50">hashbr..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (17 samples, 0.13%)</title><rect x="76.7724%" y="245" width="0.1257%" height="15" fill="rgb(243,76,11)" fg:x="10385" fg:w="17"/><text x="77.0224%" y="255.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (17 samples, 0.13%)</title><rect x="76.7724%" y="229" width="0.1257%" height="15" fill="rgb(245,21,50)" fg:x="10385" fg:w="17"/><text x="77.0224%" y="239.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (17 samples, 0.13%)</title><rect x="76.7724%" y="213" width="0.1257%" height="15" fill="rgb(228,9,43)" fg:x="10385" fg:w="17"/><text x="77.0224%" y="223.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (42 samples, 0.31%)</title><rect x="78.5096%" y="165" width="0.3105%" height="15" fill="rgb(208,100,47)" fg:x="10620" fg:w="42"/><text x="78.7596%" y="175.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (112 samples, 0.83%)</title><rect x="78.2509%" y="181" width="0.8280%" height="15" fill="rgb(232,26,8)" fg:x="10585" fg:w="112"/><text x="78.5009%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (35 samples, 0.26%)</title><rect x="78.8201%" y="165" width="0.2587%" height="15" fill="rgb(216,166,38)" fg:x="10662" fg:w="35"/><text x="79.0701%" y="175.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (195 samples, 1.44%)</title><rect x="80.0177%" y="165" width="1.4416%" height="15" fill="rgb(251,202,51)" fg:x="10824" fg:w="195"/><text x="80.2677%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (626 samples, 4.63%)</title><rect x="77.3934%" y="229" width="4.6278%" height="15" fill="rgb(254,216,34)" fg:x="10469" fg:w="626"/><text x="77.6434%" y="239.50">&lt;std:..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (626 samples, 4.63%)</title><rect x="77.3934%" y="213" width="4.6278%" height="15" fill="rgb(251,32,27)" fg:x="10469" fg:w="626"/><text x="77.6434%" y="223.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (626 samples, 4.63%)</title><rect x="77.3934%" y="197" width="4.6278%" height="15" fill="rgb(208,127,28)" fg:x="10469" fg:w="626"/><text x="77.6434%" y="207.50">&lt;core..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (398 samples, 2.94%)</title><rect x="79.0789%" y="181" width="2.9423%" height="15" fill="rgb(224,137,22)" fg:x="10697" fg:w="398"/><text x="79.3289%" y="191.50">&lt;c..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (76 samples, 0.56%)</title><rect x="81.4593%" y="165" width="0.5618%" height="15" fill="rgb(254,70,32)" fg:x="11019" fg:w="76"/><text x="81.7093%" y="175.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (106 samples, 0.78%)</title><rect x="82.0211%" y="229" width="0.7836%" height="15" fill="rgb(229,75,37)" fg:x="11095" fg:w="106"/><text x="82.2711%" y="239.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (3 samples, 0.02%)</title><rect x="82.7826%" y="213" width="0.0222%" height="15" fill="rgb(252,64,23)" fg:x="11198" fg:w="3"/><text x="83.0326%" y="223.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (3 samples, 0.02%)</title><rect x="82.7826%" y="197" width="0.0222%" height="15" fill="rgb(232,162,48)" fg:x="11198" fg:w="3"/><text x="83.0326%" y="207.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (3 samples, 0.02%)</title><rect x="82.7826%" y="181" width="0.0222%" height="15" fill="rgb(246,160,12)" fg:x="11198" fg:w="3"/><text x="83.0326%" y="191.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (67 samples, 0.50%)</title><rect x="84.9412%" y="69" width="0.4953%" height="15" fill="rgb(247,166,0)" fg:x="11490" fg:w="67"/><text x="85.1912%" y="79.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (178 samples, 1.32%)</title><rect x="84.6086%" y="85" width="1.3159%" height="15" fill="rgb(249,219,21)" fg:x="11445" fg:w="178"/><text x="84.8586%" y="95.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (66 samples, 0.49%)</title><rect x="85.4365%" y="69" width="0.4879%" height="15" fill="rgb(205,209,3)" fg:x="11557" fg:w="66"/><text x="85.6865%" y="79.50"></text></g><g><title>core::cmp::min (2 samples, 0.01%)</title><rect x="85.9244%" y="85" width="0.0148%" height="15" fill="rgb(243,44,1)" fg:x="11623" fg:w="2"/><text x="86.1744%" y="95.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.01%)</title><rect x="85.9244%" y="69" width="0.0148%" height="15" fill="rgb(206,159,16)" fg:x="11623" fg:w="2"/><text x="86.1744%" y="79.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (706 samples, 5.22%)</title><rect x="82.8195%" y="133" width="5.2192%" height="15" fill="rgb(244,77,30)" fg:x="11203" fg:w="706"/><text x="83.0695%" y="143.50">&lt;std::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (703 samples, 5.20%)</title><rect x="82.8417%" y="117" width="5.1970%" height="15" fill="rgb(218,69,12)" fg:x="11206" fg:w="703"/><text x="83.0917%" y="127.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (703 samples, 5.20%)</title><rect x="82.8417%" y="101" width="5.1970%" height="15" fill="rgb(212,87,7)" fg:x="11206" fg:w="703"/><text x="83.0917%" y="111.50">&lt;core:..</text></g><g><title>core::hash::sip::u8to64_le (284 samples, 2.10%)</title><rect x="85.9392%" y="85" width="2.0995%" height="15" fill="rgb(245,114,25)" fg:x="11625" fg:w="284"/><text x="86.1892%" y="95.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (4 samples, 0.03%)</title><rect x="88.0092%" y="69" width="0.0296%" height="15" fill="rgb(210,61,42)" fg:x="11905" fg:w="4"/><text x="88.2592%" y="79.50"></text></g><g><title>&lt;rust_gym::easy_21::Action as core::hash::Hash&gt;::hash (750 samples, 5.54%)</title><rect x="82.8048%" y="197" width="5.5445%" height="15" fill="rgb(211,52,33)" fg:x="11201" fg:w="750"/><text x="83.0548%" y="207.50">&lt;rust_g..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for isize&gt;::hash (748 samples, 5.53%)</title><rect x="82.8195%" y="181" width="5.5297%" height="15" fill="rgb(234,58,33)" fg:x="11203" fg:w="748"/><text x="83.0695%" y="191.50">core::h..</text></g><g><title>core::hash::Hasher::write_isize (748 samples, 5.53%)</title><rect x="82.8195%" y="165" width="5.5297%" height="15" fill="rgb(220,115,36)" fg:x="11203" fg:w="748"/><text x="83.0695%" y="175.50">core::h..</text></g><g><title>core::hash::Hasher::write_usize (748 samples, 5.53%)</title><rect x="82.8195%" y="149" width="5.5297%" height="15" fill="rgb(243,153,54)" fg:x="11203" fg:w="748"/><text x="83.0695%" y="159.50">core::h..</text></g><g><title>core::num::&lt;impl usize&gt;::to_ne_bytes (42 samples, 0.31%)</title><rect x="88.0387%" y="133" width="0.3105%" height="15" fill="rgb(251,47,18)" fg:x="11909" fg:w="42"/><text x="88.2887%" y="143.50"></text></g><g><title>core::cmp::min (32 samples, 0.24%)</title><rect x="90.8036%" y="85" width="0.2366%" height="15" fill="rgb(242,102,42)" fg:x="12283" fg:w="32"/><text x="91.0536%" y="95.50"></text></g><g><title>core::cmp::Ord::min (32 samples, 0.24%)</title><rect x="90.8036%" y="69" width="0.2366%" height="15" fill="rgb(234,31,38)" fg:x="12283" fg:w="32"/><text x="91.0536%" y="79.50"></text></g><g><title>hashbrown::map::make_hash (2,144 samples, 15.85%)</title><rect x="77.3786%" y="261" width="15.8498%" height="15" fill="rgb(221,117,51)" fg:x="10467" fg:w="2144"/><text x="77.6286%" y="271.50">hashbrown::map::make_hash</text></g><g><title>core::hash::BuildHasher::hash_one (2,143 samples, 15.84%)</title><rect x="77.3860%" y="245" width="15.8424%" height="15" fill="rgb(212,20,18)" fg:x="10468" fg:w="2143"/><text x="77.6360%" y="255.50">core::hash::BuildHasher:..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1,410 samples, 10.42%)</title><rect x="82.8048%" y="229" width="10.4236%" height="15" fill="rgb(245,133,36)" fg:x="11201" fg:w="1410"/><text x="83.0548%" y="239.50">core::hash::imp..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for (T,B)&gt;::hash (1,410 samples, 10.42%)</title><rect x="82.8048%" y="213" width="10.4236%" height="15" fill="rgb(212,6,19)" fg:x="11201" fg:w="1410"/><text x="83.0548%" y="223.50">core::hash::imp..</text></g><g><title>&lt;rust_gym::easy_21::Observation as core::hash::Hash&gt;::hash (660 samples, 4.88%)</title><rect x="88.3492%" y="197" width="4.8791%" height="15" fill="rgb(218,1,36)" fg:x="11951" fg:w="660"/><text x="88.5992%" y="207.50">&lt;rust_..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for i8&gt;::hash (660 samples, 4.88%)</title><rect x="88.3492%" y="181" width="4.8791%" height="15" fill="rgb(246,84,54)" fg:x="11951" fg:w="660"/><text x="88.5992%" y="191.50">core::..</text></g><g><title>core::hash::Hasher::write_i8 (658 samples, 4.86%)</title><rect x="88.3640%" y="165" width="4.8643%" height="15" fill="rgb(242,110,6)" fg:x="11953" fg:w="658"/><text x="88.6140%" y="175.50">core::..</text></g><g><title>core::hash::Hasher::write_u8 (658 samples, 4.86%)</title><rect x="88.3640%" y="149" width="4.8643%" height="15" fill="rgb(214,47,5)" fg:x="11953" fg:w="658"/><text x="88.6140%" y="159.50">core::..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (557 samples, 4.12%)</title><rect x="89.1107%" y="133" width="4.1177%" height="15" fill="rgb(218,159,25)" fg:x="12054" fg:w="557"/><text x="89.3607%" y="143.50">&lt;std..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (557 samples, 4.12%)</title><rect x="89.1107%" y="117" width="4.1177%" height="15" fill="rgb(215,211,28)" fg:x="12054" fg:w="557"/><text x="89.3607%" y="127.50">&lt;cor..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (557 samples, 4.12%)</title><rect x="89.1107%" y="101" width="4.1177%" height="15" fill="rgb(238,59,32)" fg:x="12054" fg:w="557"/><text x="89.3607%" y="111.50">&lt;cor..</text></g><g><title>core::hash::sip::u8to64_le (296 samples, 2.19%)</title><rect x="91.0401%" y="85" width="2.1882%" height="15" fill="rgb(226,82,3)" fg:x="12315" fg:w="296"/><text x="91.2901%" y="95.50">c..</text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (26 samples, 0.19%)</title><rect x="93.7902%" y="213" width="0.1922%" height="15" fill="rgb(240,164,32)" fg:x="12687" fg:w="26"/><text x="94.0402%" y="223.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (23 samples, 0.17%)</title><rect x="93.8124%" y="197" width="0.1700%" height="15" fill="rgb(232,46,7)" fg:x="12690" fg:w="23"/><text x="94.0624%" y="207.50"></text></g><g><title>hashbrown::map::equivalent_key::{{closure}} (397 samples, 2.93%)</title><rect x="93.9898%" y="197" width="2.9349%" height="15" fill="rgb(229,129,53)" fg:x="12714" fg:w="397"/><text x="94.2398%" y="207.50">ha..</text></g><g><title>core::tuple::&lt;impl core::cmp::PartialEq for (U,T)&gt;::eq (397 samples, 2.93%)</title><rect x="93.9898%" y="181" width="2.9349%" height="15" fill="rgb(234,188,29)" fg:x="12714" fg:w="397"/><text x="94.2398%" y="191.50">co..</text></g><g><title>&lt;rust_gym::easy_21::Observation as core::cmp::PartialEq&gt;::eq (211 samples, 1.56%)</title><rect x="95.3648%" y="165" width="1.5598%" height="15" fill="rgb(246,141,4)" fg:x="12900" fg:w="211"/><text x="95.6148%" y="175.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (474 samples, 3.50%)</title><rect x="93.9898%" y="213" width="3.5041%" height="15" fill="rgb(229,23,39)" fg:x="12714" fg:w="474"/><text x="94.2398%" y="223.50">has..</text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ref (77 samples, 0.57%)</title><rect x="96.9247%" y="197" width="0.5692%" height="15" fill="rgb(206,12,3)" fg:x="13111" fg:w="77"/><text x="97.1747%" y="207.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::as_ptr (77 samples, 0.57%)</title><rect x="96.9247%" y="181" width="0.5692%" height="15" fill="rgb(252,226,20)" fg:x="13111" fg:w="77"/><text x="97.1747%" y="191.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (77 samples, 0.57%)</title><rect x="96.9247%" y="165" width="0.5692%" height="15" fill="rgb(216,123,35)" fg:x="13111" fg:w="77"/><text x="97.1747%" y="175.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (77 samples, 0.57%)</title><rect x="96.9247%" y="149" width="0.5692%" height="15" fill="rgb(212,68,40)" fg:x="13111" fg:w="77"/><text x="97.1747%" y="159.50"></text></g><g><title>hashbrown::raw::h2 (65 samples, 0.48%)</title><rect x="97.4939%" y="213" width="0.4805%" height="15" fill="rgb(254,125,32)" fg:x="13188" fg:w="65"/><text x="97.7439%" y="223.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (5 samples, 0.04%)</title><rect x="97.9744%" y="213" width="0.0370%" height="15" fill="rgb(253,97,22)" fg:x="13253" fg:w="5"/><text x="98.2244%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (5 samples, 0.04%)</title><rect x="97.9744%" y="197" width="0.0370%" height="15" fill="rgb(241,101,14)" fg:x="13253" fg:w="5"/><text x="98.2244%" y="207.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.04%)</title><rect x="97.9744%" y="181" width="0.0370%" height="15" fill="rgb(238,103,29)" fg:x="13253" fg:w="5"/><text x="98.2244%" y="191.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get_mut (2,916 samples, 21.56%)</title><rect x="76.8981%" y="309" width="21.5569%" height="15" fill="rgb(233,195,47)" fg:x="10402" fg:w="2916"/><text x="77.1481%" y="319.50">std::collections::hash::map::HashM..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_mut (2,916 samples, 21.56%)</title><rect x="76.8981%" y="293" width="21.5569%" height="15" fill="rgb(246,218,30)" fg:x="10402" fg:w="2916"/><text x="77.1481%" y="303.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::..</text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner_mut (2,916 samples, 21.56%)</title><rect x="76.8981%" y="277" width="21.5569%" height="15" fill="rgb(219,145,47)" fg:x="10402" fg:w="2916"/><text x="77.1481%" y="287.50">hashbrown::map::HashMap&lt;K,V,S,A&gt;::..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::get_mut (707 samples, 5.23%)</title><rect x="93.2284%" y="261" width="5.2266%" height="15" fill="rgb(243,12,26)" fg:x="12611" fg:w="707"/><text x="93.4784%" y="271.50">hashbr..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (707 samples, 5.23%)</title><rect x="93.2284%" y="245" width="5.2266%" height="15" fill="rgb(214,87,16)" fg:x="12611" fg:w="707"/><text x="93.4784%" y="255.50">hashbr..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (707 samples, 5.23%)</title><rect x="93.2284%" y="229" width="5.2266%" height="15" fill="rgb(208,99,42)" fg:x="12611" fg:w="707"/><text x="93.4784%" y="239.50">hashbr..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (60 samples, 0.44%)</title><rect x="98.0114%" y="213" width="0.4436%" height="15" fill="rgb(253,99,2)" fg:x="13258" fg:w="60"/><text x="98.2614%" y="223.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (60 samples, 0.44%)</title><rect x="98.0114%" y="197" width="0.4436%" height="15" fill="rgb(220,168,23)" fg:x="13258" fg:w="60"/><text x="98.2614%" y="207.50"></text></g><g><title>[libc.so.6] (12,706 samples, 93.93%)</title><rect x="4.5317%" y="565" width="93.9307%" height="15" fill="rgb(242,38,24)" fg:x="613" fg:w="12706"/><text x="4.7817%" y="575.50">[libc.so.6]</text></g><g><title>main (12,695 samples, 93.85%)</title><rect x="4.6130%" y="549" width="93.8493%" height="15" fill="rgb(225,182,9)" fg:x="624" fg:w="12695"/><text x="4.8630%" y="559.50">main</text></g><g><title>std::rt::lang_start_internal (12,695 samples, 93.85%)</title><rect x="4.6130%" y="533" width="93.8493%" height="15" fill="rgb(243,178,37)" fg:x="624" fg:w="12695"/><text x="4.8630%" y="543.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (12,695 samples, 93.85%)</title><rect x="4.6130%" y="517" width="93.8493%" height="15" fill="rgb(232,139,19)" fg:x="624" fg:w="12695"/><text x="4.8630%" y="527.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (12,695 samples, 93.85%)</title><rect x="4.6130%" y="501" width="93.8493%" height="15" fill="rgb(225,201,24)" fg:x="624" fg:w="12695"/><text x="4.8630%" y="511.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (12,695 samples, 93.85%)</title><rect x="4.6130%" y="485" width="93.8493%" height="15" fill="rgb(221,47,46)" fg:x="624" fg:w="12695"/><text x="4.8630%" y="495.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (12,695 samples, 93.85%)</title><rect x="4.6130%" y="469" width="93.8493%" height="15" fill="rgb(249,23,13)" fg:x="624" fg:w="12695"/><text x="4.8630%" y="479.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (12,695 samples, 93.85%)</title><rect x="4.6130%" y="453" width="93.8493%" height="15" fill="rgb(219,9,5)" fg:x="624" fg:w="12695"/><text x="4.8630%" y="463.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (12,695 samples, 93.85%)</title><rect x="4.6130%" y="437" width="93.8493%" height="15" fill="rgb(254,171,16)" fg:x="624" fg:w="12695"/><text x="4.8630%" y="447.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (12,695 samples, 93.85%)</title><rect x="4.6130%" y="421" width="93.8493%" height="15" fill="rgb(230,171,20)" fg:x="624" fg:w="12695"/><text x="4.8630%" y="431.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (12,695 samples, 93.85%)</title><rect x="4.6130%" y="405" width="93.8493%" height="15" fill="rgb(210,71,41)" fg:x="624" fg:w="12695"/><text x="4.8630%" y="415.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (12,695 samples, 93.85%)</title><rect x="4.6130%" y="389" width="93.8493%" height="15" fill="rgb(206,173,20)" fg:x="624" fg:w="12695"/><text x="4.8630%" y="399.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (12,695 samples, 93.85%)</title><rect x="4.6130%" y="373" width="93.8493%" height="15" fill="rgb(233,88,34)" fg:x="624" fg:w="12695"/><text x="4.8630%" y="383.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (12,695 samples, 93.85%)</title><rect x="4.6130%" y="357" width="93.8493%" height="15" fill="rgb(223,209,46)" fg:x="624" fg:w="12695"/><text x="4.8630%" y="367.50">core::ops::function::FnOnce::call_once</text></g><g><title>sarsa::main (12,695 samples, 93.85%)</title><rect x="4.6130%" y="341" width="93.8493%" height="15" fill="rgb(250,43,18)" fg:x="624" fg:w="12695"/><text x="4.8630%" y="351.50">sarsa::main</text></g><g><title>sarsa::TdAgent::train (12,695 samples, 93.85%)</title><rect x="4.6130%" y="325" width="93.8493%" height="15" fill="rgb(208,13,10)" fg:x="624" fg:w="12695"/><text x="4.8630%" y="335.50">sarsa::TdAgent::train</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (109 samples, 0.81%)</title><rect x="98.4697%" y="549" width="0.8058%" height="15" fill="rgb(212,200,36)" fg:x="13320" fg:w="109"/><text x="98.7197%" y="559.50"></text></g><g><title>core::hash::BuildHasher::hash_one (91 samples, 0.67%)</title><rect x="99.2755%" y="549" width="0.6727%" height="15" fill="rgb(225,90,30)" fg:x="13429" fg:w="91"/><text x="99.5255%" y="559.50"></text></g><g><title>&lt;std::collections::hash::map::HashMap&lt;K,V,S&gt; as core::ops::index::Index&lt;&amp;Q&gt;&gt;::index (2 samples, 0.01%)</title><rect x="99.9630%" y="533" width="0.0148%" height="15" fill="rgb(236,182,39)" fg:x="13522" fg:w="2"/><text x="100.2130%" y="543.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::get (2 samples, 0.01%)</title><rect x="99.9630%" y="517" width="0.0148%" height="15" fill="rgb(212,144,35)" fg:x="13522" fg:w="2"/><text x="100.2130%" y="527.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get (2 samples, 0.01%)</title><rect x="99.9630%" y="501" width="0.0148%" height="15" fill="rgb(228,63,44)" fg:x="13522" fg:w="2"/><text x="100.2130%" y="511.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::get_inner (2 samples, 0.01%)</title><rect x="99.9630%" y="485" width="0.0148%" height="15" fill="rgb(228,109,6)" fg:x="13522" fg:w="2"/><text x="100.2130%" y="495.50"></text></g><g><title>hashbrown::map::make_hash (2 samples, 0.01%)</title><rect x="99.9630%" y="469" width="0.0148%" height="15" fill="rgb(238,117,24)" fg:x="13522" fg:w="2"/><text x="100.2130%" y="479.50"></text></g><g><title>[unknown] (205 samples, 1.52%)</title><rect x="98.4697%" y="565" width="1.5155%" height="15" fill="rgb(242,26,26)" fg:x="13320" fg:w="205"/><text x="98.7197%" y="575.50"></text></g><g><title>sarsa::TdAgent::train (3 samples, 0.02%)</title><rect x="99.9630%" y="549" width="0.0222%" height="15" fill="rgb(221,92,48)" fg:x="13522" fg:w="3"/><text x="100.2130%" y="559.50"></text></g><g><title>all (13,527 samples, 100%)</title><rect x="0.0000%" y="597" width="100.0000%" height="15" fill="rgb(209,209,32)" fg:x="0" fg:w="13527"/><text x="0.2500%" y="607.50"></text></g><g><title>sarsa (13,448 samples, 99.42%)</title><rect x="0.5840%" y="581" width="99.4160%" height="15" fill="rgb(221,70,22)" fg:x="79" fg:w="13448"/><text x="0.8340%" y="591.50">sarsa</text></g></svg></svg>